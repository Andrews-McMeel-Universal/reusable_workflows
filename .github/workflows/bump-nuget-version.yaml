name: Bump Nuget Version

on:
  workflow_call:
    inputs:
      projectName:
        required: true
        type: string
        description: Models Project Directory Name
      libraryName:
        required: false
        type: string
        description: Set to true if project has a separate library name
        default: ""
    secrets:
      PAT_ACTION_CI:
        required: false

jobs:
  bump-nuget-version:
    name: Bump Nuget Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for existing version bump commit
        id: check-version-bump
        run: |
          if git log --oneline | grep -q "Bump ${{ inputs.libraryName }} Nuget Version"; then
            echo "version-bump-exists=true" >> $GITHUB_OUTPUT
          else
            echo "version-bump-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check modified files
        if: ${{ steps.check-version-bump.outputs.version-bump-exists == 'false' }}
        id: files-changed
        run: |
          while IFS= read -r FILE; do
            if [[ -n "${{ inputs.libraryName }}" ]]; then
              PROJECT_PATH="${{ inputs.projectName }}/${{ inputs.libraryName }}/*"
            else
              PROJECT_PATH="${{ inputs.projectName }}/*"
            fi
            if echo "${FILE}" | grep -Eq "${PROJECT_PATH}" ; then
              echo "models-changed=true" >> $GITHUB_OUTPUT
            fi
          done < <(git diff --name-only development...HEAD)

      - name: Run Increment-Version.ps1
        if: ${{ steps.files-changed.outputs.models-changed == 'true' && steps.check-version-bump.outputs.version-bump-exists == 'false' }}
        shell: pwsh
        run: |
          $ProjectName = "${{ inputs.projectName }}"
          $LibraryName = "${{ inputs.libraryName }}"

          # Get project file contents
          if ($LibraryName) {
              $ProjectFile = ("$ProjectName/$LibraryName/$LibraryName.csproj")
          }
          else {
              $ProjectFile = ("$ProjectName/$ProjectName.csproj")
          }
          $ProjectFileContents = Get-Content $ProjectFile -Raw

          # Get version from project file
          $VersionString = [RegEx]::Match($ProjectFileContents, "<Version>(.+?)</Version>")
          $Version = [version]([RegEx]::Match($VersionString, "((?:\d+\.\d+\.\d+))")).Value
          Write-Host ("Current Version: " + $Version) -ForegroundColor DarkGray

          # Bump version number
          if ($Version.Build -eq "9999") {
              $NewBuild = 0
          }
          else {
              $NewBuild = $Version.Build + 1
          }
          $NewVersion = ([string]$Version.Major + "." + [string]$Version.Minor + "." + [string]$NewBuild)
          Write-Host ("New Version: " + $NewVersion) -ForegroundColor DarkGray

          # Update version number in project file
          $ProjectFileContents = [RegEx]::Replace($ProjectFileContents, "<Version>(.+?)</Version>", ("<Version>" + $NewVersion + "</Version>"))
          Set-Content -Path $ProjectFile -Value $ProjectFileContents

          # Verify version number in project file
          $UpdatedVersionString = [RegEx]::Match((Get-Content $ProjectFile -Raw), "<Version>(.+?)</Version>")
          $UpdatedVersion = [version]([RegEx]::Match($UpdatedVersionString, "((?:\d+\.\d+\.\d+))")).Value
          if ($UpdatedVersion -eq $NewVersion) {
              Write-Host ('Version was updated correctly. Version string: "' + $UpdatedVersionString + '"') -ForegroundColor Green
          }
          else {
              Write-Error "Version not updated correctly. Version string: $UpdatedVersionString"
              exit 1
          }

      - name: Commit Changes
        if: ${{ ! inputs.libraryName && steps.check-version-bump.outputs.version-bump-exists == 'false' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_user_name: amutechtest
          commit_user_email: amu_deploy@amuniversal.com
          commit_message: ⬆️ Bump Nuget version

      - name: Commit Changes
        if: ${{ inputs.libraryName && steps.check-version-bump.outputs.version-bump-exists == 'false' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_user_name: amutechtest
          commit_user_email: amu_deploy@amuniversal.com
          commit_message: ⬆️ Bump ${{ inputs.libraryName }} Nuget version