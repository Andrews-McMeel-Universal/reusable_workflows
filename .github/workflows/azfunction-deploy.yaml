name: Azure Function Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy Environment.  This is used to pull in and set the github environment. Can be development, staging, or production."
      DOTNET_VERSION:
        default: "6.0.x"
        type: string
      AZURE_FUNCTIONAPP_NAME:
        type: string
        required: true
        description: "set this to your application's name"
      AZURE_FUNCTIONAPP_RESOURCEGROUP:
        type: string
        default: "AMU_Serverless_RG"
      AZURE_FUNCTIONAPP_PACKAGE_PATH:
        default: "."
        description: "set this to the path to your web app project, defaults to the repository root"
        type: string
      checkoutRef:
        required: false
        type: string
        description: "The branch, tag, or SHA to checkout"
        default: ${{ github.ref }}
      deploymentWebhook:
        required: false
        type: string
        description: "The webhook URL for the deployment status"
        default: ${{ vars.MSTEAMS_DEPLOYMENT_WEBHOOK }}
    secrets:
      AZURE_CREDENTIALS:
        required: true
      AZUREAPPSERVICE_PUBLISHPROFILE:
        required: true
      PAT_ACTION_CI:
        required: false

jobs:
  vars:
    name: Set Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Get environment hostname
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]] ; then
              echo "hostname=${{ inputs.AZURE_FUNCTIONAPP_NAME }}" >> $GITHUB_ENV
          else
              echo "hostname=${{ inputs.AZURE_FUNCTIONAPP_NAME }}-${{ inputs.environment }}" >> $GITHUB_ENV
          fi
    outputs:
      hostname: ${{ env.hostname }}

  build-and-deploy:
    name: Deploy to ${{ inputs.environment }}
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ needs.vars.outputs.hostname }}.azurewebsites.net
    needs: [vars]
    runs-on: ubuntu-latest
    env:
      PAT_ACTION_CI: ${{ secrets.PAT_ACTION_CI }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkoutRef }}

      - name: Setup application platform
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}

      - name: Add AMU GitHub Packages nuget source
        if: ${{ env.PAT_ACTION_CI }}
        run: |
          dotnet nuget add source "https://nuget.pkg.github.com/andrews-mcmeel-universal/index.json" --name "AMU GitHub Packages" --username "amu_deploy@amuniversal.com" --password "${{ secrets.PAT_ACTION_CI }}" --store-password-in-clear-text

      - name: Install Dependencies
        run: |
          pushd './${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd

      - name: Login via Az module
        uses: azure/login@v2
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"

      - name: Whitelist Boley IPs
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -eu
            if [[ "${{ inputs.environment }}" == "production" ]]; then
                RESULT=$(az functionapp config access-restriction add \
                  -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                  -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                  --rule-name "BoleyIPs" \
                  --action "Allow" \
                  --ip-address 207.67.20.0/24 \
                  --priority 100 | tee )
            else
                RESULT=$(az functionapp config access-restriction add \
                -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                --rule-name "BoleyIPs" \
                --action "Allow" \
                --ip-address 207.67.20.0/24 \
                --priority 100 \
                --slot "${{ inputs.environment }}" | tee )
            fi
            if [[ "$RESULT" =~ "already exists" ]] || [[ ! "$RESULT" =~ "ERROR" ]]; then 
                exit 0
            else
                exit 1
            fi

      - name: Get GitHub Runner Public IP
        id: ip
        run: |
          echo "ipv4=$(curl https://ipecho.net/plain ; echo)" >> $GITHUB_OUTPUT

      - name: Whitelist GitHub Runner IP
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -eu
            if [[ "${{ inputs.environment }}" == "production" ]]; then
                RESULT=$(az functionapp config access-restriction add \
                  -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                  -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                  --rule-name "GitHubActionRunner" \
                  --action "Allow" \
                  --ip-address ${{ steps.ip.outputs.ipv4 }} \
                  --priority 1001 | tee )
            else
                RESULT=$(az functionapp config access-restriction add \
                  -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                  -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                  --rule-name "GitHubActionRunner" \
                  --action "Allow" \
                  --ip-address ${{ steps.ip.outputs.ipv4 }} \
                  --priority 1001 \
                  --slot "${{ inputs.environment }}" | tee )
            fi
            if [[ "$RESULT" =~ "already exists" ]] || [[ ! "$RESULT" =~ "ERROR" ]]; then 
                exit 0
            else
                exit 1
            fi
            sleep 5

      - name: Deploy Azure Functions
        uses: azure/functions-action@v1
        with:
          app-name: ${{ inputs.AZURE_FUNCTIONAPP_NAME }}
          slot-name: ${{ inputs.environment }}
          package: "${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}

      - name: Enable identity for Azure Function
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -eu
            if [[ "${{ inputs.environment }}" == "production" ]]; then
              az functionapp identity assign \
                -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" | tee
            else
              az functionapp identity assign \
                -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                --slot "${{ inputs.environment }}" | tee
            fi

      - name: Get Azure Function Managed Identity
        id: identity
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -eu
            if [[ "${{ inputs.environment }}" == "production" ]]; then
              IDENTITY=$(az functionapp identity show \
                -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" | tee)
            else
              IDENTITY=$(az functionapp identity show \
                -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                --slot "${{ inputs.environment }}" | tee)
            fi
            echo "functionAppIdentity=$(echo $IDENTITY | jq -r '.principalId')" >> $GITHUB_ENV

      - name: Retrieve key vault name
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -eu
            ENVIRONMENT="${{ inputs.environment }}"
            REPOSITORY_NAME="${{ github.event.repository.name }}"

            echo -e "Searching for key vault with tags: \"repository-name=${REPOSITORY_NAME};environment=${ENVIRONMENT}\""
            KEYVAULT_NAME=$(az keyvault list --query "[?tags.\"repository-name\" == '${REPOSITORY_NAME}' && tags.environment == '${ENVIRONMENT}'].name" --output tsv)

            # Check if key vault was found
            if [[ -z "$KEYVAULT_NAME" ]]; then
              echo "Key Vault not found with tags: repository-name=${REPOSITORY_NAME};environment=${ENVIRONMENT}"
              exit 1
            fi

            # Get key vault object
            KEYVAULT_NAME=${KEYVAULT_NAME// /}
            echo "keyVaultName=${KEYVAULT_NAME}" >> $GITHUB_ENV

      - name: Assign Azure Function System Managed Identity to Key Vault
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -eu
            # Assign the Key Vault Secrets User role to the managed identity
            az role assignment create --role "Key Vault Secrets User" --assignee ${{ env.functionAppIdentity }} --scope $(az keyvault show --name ${{ env.keyVaultName }} --query id --output tsv)
      
      - name: Retrieve environment variables
        if: ${{ env.AZURE_CREDENTIALS_SET != 'false' }}
        id: get-envs
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ inputs.environment }}
          contentTypes: Env

      - name: Add environment variables to function app
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -eu
            # Iterate over each environment variable
            for part in ${{ steps.get-envs.outputs.environmentVariables }}; do
              part=$(echo $part | xargs)  # Trim leading and trailing spaces
              IFS='=' read -r key value <<< "$part"
              VARIABLE_LC=$(echo "$key" | tr '[:upper:]' '[:lower:]' | tr "_" "-")
              if [[ "${{ inputs.environment }}" == "production" ]]; then
                az functionapp config appsettings set \
                  -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                  -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                  --slot-settings "$key=@Microsoft.KeyVault(VaultName=${{ env.keyVaultName }};SecretName=${VARIABLE_LC})" | tee
              else
                az functionapp config appsettings set \
                  -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                  -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                  --slot "${{ inputs.environment }}" \
                  --slot-settings "$key=@Microsoft.KeyVault(VaultName=${{ env.keyVaultName }};SecretName=${VARIABLE_LC})" | tee
              fi
            done

      - name: Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -eu
            if [[ "${{ inputs.environment }}" == "production" ]]; then
                RESULT=$(az functionapp config access-restriction remove  \
                  -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                  -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                  --rule-name "GitHubActionRunner" | tee )
            else
                RESULT=$(az functionapp config access-restriction remove  \
                  -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
                  -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
                  --rule-name "GitHubActionRunner" \
                  --slot "${{ inputs.environment }}" | tee )
            fi
            if [[ "$RESULT" =~ "already exists" ]] || [[ ! "$RESULT" =~ "ERROR" ]]; then 
                exit 0
            else
                exit 1
            fi

      - name: Send Failed Deployment report to Teams
        if: failure() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }} # this will use the runner's token.
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Failed ${{ inputs.environment }} Deployment"
          notification-color: 17a2b8
          timezone: America/Chicago
          verbose-logging: true

      - name: Send Succeeded Deployment report to Teams
        if: success() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }} # this will use the runner's token.
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Successful ${{ inputs.environment }} Deployment"
          notification-color: 28a745
          timezone: America/Chicago
          verbose-logging: true
