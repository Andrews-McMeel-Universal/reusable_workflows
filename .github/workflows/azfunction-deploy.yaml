name: Azure Function Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy Environment.  This is used to pull in and set the github environment. Can be development, staging, or production."
      DOTNET_VERSION:
        default: "6.0.x"
        type: string
      AZURE_FUNCTIONAPP_NAME:
        type: string
        required: true
        description: "set this to your application's name"
      AZURE_FUNCTIONAPP_RESOURCEGROUP:
        type: string
        default: "AMU_Serverless_RG"
      AZURE_FUNCTIONAPP_PACKAGE_PATH:
        default: "."
        description: "set this to the path to your web app project, defaults to the repository root"
        type: string
    secrets:
      azureCredentials:
        required: true
      azureAppServicePublishProfile:
        required: true

jobs:
  vars:
    name: Set Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Get environment hostname
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]] ; then
              echo "hostname=${{ inputs.AZURE_FUNCTIONAPP_NAME }}" >> $GITHUB_ENV
          else
              echo "hostname=${{ inputs.AZURE_FUNCTIONAPP_NAME }}-${{ inputs.environment }}" >> $GITHUB_ENV
          fi
    outputs:
      hostname: ${{ env.hostname }}

  build-and-deploy:
    name: Build and Deploy
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ needs.vars.outputs.hostname }}.azurewebsites.net
    needs: [vars]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@v3

      - name: Setup application platform
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}

      - name: Install Dependencies
        run: |
          pushd './${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd

      - name: Hash azureCredentials secret
        uses: pplanel/hash-calculator-action@v1.3.1
        id: hash
        with:
          input: ${{ secrets.azureCredentials }}
          method: MD5

      - name: Cache Azure credentials
        id: azure-cache
        uses: actions/cache@v3
        with:
          path: ~/.azure
          key: ${{ runner.os }}-azurecreds-${{ steps.hash.outputs.digest }}

      - name: Login via Az module
        if: steps.azure-cache.outputs.cache-hit != 'true'
        uses: azure/login@v1
        with:
          creds: "${{ secrets.azureCredentials }}"

      - name: Whitelist Boley IPs
        continue-on-error: true
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            az functionapp config access-restriction add \
              -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
              -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
              --rule-name "BoleyIPs" \
              --action "Allow" \
              --ip-address 207.67.20.202/24 \
              --priority 100 \
              --slot "${{ inputs.environment }}"

      - name: Get GitHub Runner Public IP
        id: ip
        run: |
          echo "ipv4=$(curl https://ipecho.net/plain ; echo)" >> $GITHUB_OUTPUT

      - name: Whitelist GitHub Runner IP
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            az functionapp config access-restriction add \
              -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
              -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
              --rule-name "GitHubActionRunner" \
              --action "Allow" \
              --ip-address ${{ steps.ip.outputs.ipv4 }} \
              --priority 1001 \
              --slot "${{ inputs.environment }}"
            sleep 5

      - name: Deploy Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ inputs.AZURE_FUNCTIONAPP_NAME }}
          slot-name: ${{ inputs.environment }}
          package: "${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}

      - name: Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            az functionapp config access-restriction remove  \
              -g "${{ inputs.AZURE_FUNCTIONAPP_RESOURCEGROUP }}" \
              -n "${{ inputs.AZURE_FUNCTIONAPP_NAME }}" \
              --rule-name "GitHubActionRunner" \
              --slot "${{ inputs.environment }}"
