on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      charts_path:
        required: true
        type: string
        description: "Relative path to Helm charts."
jobs:
  Get-Application-Settings:
    runs-on: ubuntu-latest

    steps:
      - name: Get Env
        id: getenvs
        shell: pwsh
        run: |
          function Get-Envs {
            param (
                  [parameter(Mandatory = $true, ValueFromPipeline = $true)]
                  [string]$PathToYaml
                  )

                  #Check to see if powershell-yaml is installed 
                  if (Get-Module -Name powershell-yaml) {
                    #It's installed, this would be if you are running locally. 
                  }
                  else {
                      Write-Host "Installing Powershell-Yaml."
                      Install-Module -Name powershell-yaml -Confirm:$false -Force
                  }

                  Import-Module powershell-yaml

                  Write-Host "Getting configuration from: $PathToYaml."

                  $Values = Get-Content $PathToYaml | ConvertFrom-Yaml

                  return $Values
          }

          $AppEnv = "${{ inputs.environment }}"
          $BasePath = Get-Location
          $YamlPath = Join-Path $BasePath ${{ inputs.charts_path }} "values.yaml"
          $AppConfig = Get-Envs -PathToYaml $YamlPath
          $YamlPath = Join-Path $BasePath ${{ inputs.charts_path }} "Chart.yaml"
          $ChartConfig = Get-Envs -PathToYaml $YamlPath
          $AppName = $ChartConfig.name
          $ConfigMap = $AppConfig.deployment.configMap
          $ConfigSecret = $AppConfig.deployment.secret
          $Ingress = $AppConfig.ingress.host
          $DomainName = ($Ingress.Split('.') | Select-Object -Last 2) -join '.'
          $HostName = $Ingress -replace $DomainName, ''
          $HostName = $HostName.Substring(0,$HostName.Length-1)
          switch ($AppEnv) {
            'development' {$HostName = "development.$Hostname"; $Ingress = "development.$Ingress"}
            'staging' {$HostName = "staging.$Hostname"; $Ingress = "staging.$Ingress"}
          }
          $ImagePullSecret = "$AppName-pull-secret"
          echo "::set-output name=APPNAME::$AppName"
          echo "::set-output name=CONFIGMAP::$ConfigMap"
          echo "::set-output name=CONFIGSECRET::$ConfigSecret"
          echo "::set-output name=APPINGRESS::$Ingress"
          echo "::set-output name=DOMAINNAME::$DomainName"
          echo "::set-output name=HOSTNAME::$HostName"
          echo "::set-output name=IMAGEPULLSECRET::$ImagePullSecret"
    outputs:
      appname: ${{ steps.getenvs.outputs.APPNAME }}
      configmap: ${{ steps.setenvs.outputs.CONFIGMAP }}
      configsecret: ${{ steps.setenvs.outputs.CONFIGSECRET }}
      appingress: ${{ steps.setenvs.outputs.APPINGRESS }}
      domainname: ${{ steps.setenvs.outputs.DOMAINNAME }}
      hostname: ${{ steps.setenvs.outputs.HOSTNAME }}
      imagepullsecret: ${{ steps.setenvs.outputs.IMAGEPULLSECRET }}



