name: Update Boley AD DNS

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      repositoryName:
        required: false
        type: string
        description: "GitHub Repository Name."
        default: ${{ github.event.repository.name }}
      storageAccountName:
        required: false
        type: string
        description: "Storage Account for application information table."
        default: "amucloudapps"
      appInfoTableName:
        required: false
        type: string
        description: "Application information storage table."
        default: "DeployedApplications"
    secrets:
      domainController:
        required: true
        description: "Domain Controller Server Name."
      storageAccountKey:
        required: true

jobs:
  update-dns:
    name: Update Boley DNS
    runs-on: [self-hosted, Windows, boley]
    steps:
      - name: Retrieve Application information
        id: getappinfo
        shell: pwsh
        run: |
          Install-Module -Name AzTable -Force
          Import-Module AzTable

          $storageAccountName = "${{ inputs.storageAccountName }}"
          $storageAccountKey = ${{ secrets.storageAccountKey }}
          $appInfoTableName = "${{ inputs.appInfoTableName }}"

          $storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey

          #Get Storage table
          try {
              $appInfoTable = (Get-AzStorageTable -Name $appInfoTableName -Context $storageContext -ErrorAction Stop).CloudTable 
              }
          catch {
              Write-Error -Message "Error accessing cloud $appInfoTableName table.  Error message was: $_.Exception.Message"
              return
              }

          $appInfo = Get-AzTableRow -Table $appInfoTable -PartitionKey "${{ inputs.repositoryName }}" -RowKey "${{ inputs.environment }}"

          echo "aksIngress=$($appInfo.AksIngress)" >> $env:GITHUB_ENV
          echo "hostName=$($appInfo.HostName)" >> $env:GITHUB_ENV
          echo "domainName=$($appInfo.DomainName)" >> $env:GITHUB_ENV

      - name: Update Internal Boley DNS
        timeout-minutes: 15
        shell: pwsh
        run: |
          $hostName = "${{ env.hostName }}"
          $domainName = "${{ env.domainName }}"
          $domainController = "${{ secrets.domainController }}"
          $aksIngress = "${{ env.aksIngress }}"
          $dnsFQDN = "$hostName.$domainName"
          $dnsSubdomain = ($dnsFQDN -replace "^[^.]+\.", "")

          # Get existing DNS records in subfolder
          $dnsSubdomainRecords = @(Get-DnsServerResourceRecord -ZoneName "$domainName" -ComputerName $domainController | Where-Object { $_.HostName -like "$dnsSubdomain.*" })

          # Update DNS record
          try {
              # Get existing CNAME record
              $existingRecord = Get-DnsServerResourceRecord -ZoneName "$domainName" -ComputerName $domainController | Where-Object { $_.HostName -eq "$hostName" }

              # Error out if the existing record is not a CNAME record
              if ($existingRecord -and $existingRecord.RecordType -ne "CNAME") {
                  Write-Host "Error: Existing record for '$hostName' is not a CNAME record. It is a $($existingRecord.RecordType) record."
                  exit 1
              }

              # Remove existing CNAME record if it exists
              if ($existingRecord) {
                  Write-Output "CNAME record '$hostName' already exists. Removing it before adding the new one."
                  $recordDataAlias = $existingRecord.RecordData.HostNameAlias.TrimEnd('.')
                  Remove-DnsServerResourceRecord -ZoneName "$domainName" -Name "$hostName" -ComputerName $domainController -RecordData $existingRecord.RecordData.HostNameAlias -RRType "CNAME" -Force
              }

              # Determine the DNS record name
              if ($dnsSubdomainRecords.Count -eq 0) {
                  Write-Host "Detected '$hostName' as a root-level subfolder in DNS. Using '@' as Name."
                  $dnsRecordName = "@.$dnsSubdomain"
              }
              else {
                  Write-Host "Detected '$hostName' as a normal record. Using '$hostName' as Name."
                  $dnsRecordName = $hostName
              }

              # Strip the trailing dot from the FQDN
              $aksIngress = "$aksIngress".TrimEnd('.')

              # Add the new CNAME record
              Write-Output "Adding CNAME record for '$aksIngress' to '$dnsRecordName.$domainName'"
              Add-DnsServerResourceRecordCName -Name "$dnsRecordName" -HostNameAlias "$aksIngress" -ZoneName "$domainName" -ComputerName $domainController -PassThru
          } 
          catch {
              Write-Host "Error updating DNS record: $_"
              
              if ($_.Exception) {
                  Write-Host "Exception Message: $($_.Exception.Message)"
                  
                  if ($_.Exception.InnerException) {
                      Write-Host "Inner Exception Message: $($_.Exception.InnerException.Message)"
                  }
              }

              Write-Host "Full Error Details: $($_ | Out-String)"
              exit 1
          }

          # Verify the update
          try {
              Write-Output "Verifying the DNS record..."
              Get-DnsServerResourceRecord -ZoneName "$domainName" -ComputerName $domainController | Where-Object { $_.HostName -eq "$hostName" } | Format-List
          }
          catch {
              Write-Host "Error verifying the DNS record: $_"
          }

          # Sync DNS Zone
          try {
              Write-Output "Syncing DNS Zone '$domainName'"
              Sync-DnsServerZone -Name "$domainName" -ComputerName $domainController
          } 
          catch {
              Write-Host "Skipping zone sync. Zone is currently being synced."
          }
