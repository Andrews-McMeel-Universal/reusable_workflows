name: Update Boley AD DNS

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      repositoryName:
        required: false
        type: string
        description: "GitHub Repository Name."
        default: ${{ github.event.repository.name }}
      storageAccountName:
        required: false
        type: string
        description: "Storage Account for application information table."
        default: "amucloudapps"
      appInfoTableName:
        required: false
        type: string
        description: "Application information storage table."
        default: "DeployedApplications"
    secrets:
      domainController:
        required: true
        description: "Domain Controller Server Name."
      storageAccountKey:
        required: true

jobs:
  update-dns:
    name: Update Boley DNS
    runs-on: [self-hosted, Linux, boley]
    steps:
      - name: Retrieve Application information
        id: getappinfo
        shell: pwsh
        run: |
          Install-Module -Name AzTable -Force
          Import-Module AzTable

          $storageAccountName = "${{ inputs.storageAccountName }}"
          $storageAccountKey = ${{ secrets.storageAccountKey }}
          $appInfoTableName = "${{ inputs.appInfoTableName }}"

          $storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey

          #Get Storage table
          try {
              $appInfoTable = (Get-AzStorageTable -Name $appInfoTableName -Context $storageContext -ErrorAction Stop).CloudTable 
              }
          catch {
              Write-Error -Message "Error accessing cloud $appInfoTableName table.  Error message was: $_.Exception.Message"
              return
              }

          $appInfo = Get-AzTableRow -Table $appInfoTable -PartitionKey "${{ inputs.repositoryName }}" -RowKey "${{ inputs.environment }}"

          $applicationName = $appInfo.ApplicationName
          $version = $appInfo.Version
          $keyVault = $appInfo.KeyVault
          $hostName = $appInfo.HostName
          $domainName = $appInfo.DomainName
          $ingressFqdn = $appInfo.IngressFqdn
          $healthCheckPath = $appInfo.HealthCheckPath
          $aksIngress = $appInfo.AksIngress

          echo "applicationName=$applicationName" >> $env:GITHUB_ENV
          echo "version=$version" >> $env:GITHUB_ENV
          echo "keyVault=$keyVault" >> $env:GITHUB_ENV
          echo "hostName=$hostName" >> $env:GITHUB_ENV
          echo "domainName=$domainName" >> $env:GITHUB_ENV
          echo "applicationIngressFqdn=$ingressFqdn" >> $env:GITHUB_ENV
          echo "healthCheckPath=$healthCheckPath" >> $env:GITHUB_ENV
          echo "aksIngress=$aksIngress" >> $env:GITHUB_ENV

      - name: Update Internal Boley DNS
        timeout-minutes: 15
        shell: pwsh
        run: |
          $RecordExists = $false
          $RecordChanged = $false

          try {
              Write-Host "Adding CNAME Record: ${{ env.hostName }} -> ${{ env.aksIngress }}"
              Add-DnsServerResourceRecordCName -Name "${{ env.hostName }}" -HostNameAlias "${{ env.aksIngress}}" -ZoneName "${{ env.domainName }}" -ComputerName ${{ secrets.domainController }} 
          } 
          catch {
              Write-Host "Record Already Exists"
              $RecordExists = $true
          }

          Write-Host "Retrieving DNS Record"
          $existingRecord = Get-DnsServerResourceRecord -ZoneName "${{ env.domainName }}" -ComputerName ${{ secrets.domainController }} | Where-Object { $_.HostName -eq "${{ env.hostName }}" -and $_.RecordType -eq 'CName' }

          if ($existingRecord) {
              if ($existingRecord.RecordData.HostNameAlias -ne "${{ env.aksIngress }}") {
                  Write-Host "Existing record differs from desired record. Updating..."
                  $RecordChanged = $true
              } else {
                  Write-Host "Existing record matches the desired record. No update needed."
              }
          } else {
              Write-Host "No existing record found. Adding new record..."
              $RecordChanged = $true
          }

          if ($RecordChanged) {
              try {
                  Write-Host "Updating CNAME Record"
                  Remove-DnsServerResourceRecord -ZoneName "${{ env.domainName }}" -Name "${{ env.hostName }}" -RecordType 'CName' -ComputerName ${{ secrets.domainController }} -Force
                  Add-DnsServerResourceRecordCName -Name "${{ env.hostName }}" -HostNameAlias "${{ env.aksIngress}}" -ZoneName "${{ env.domainName }}" -ComputerName ${{ secrets.domainController }}
              } 
              catch {
                  Write-Host "Failed to update the record"
              }
          }

          if (!$RecordExists -or $RecordChanged) {
              try {
                  Write-Host "Syncing DNS Zone"
                  Sync-DnsServerZone -Name "${{ env.domainName }}" -ComputerName ${{ secrets.domainController }}
              } 
              catch {
                  Write-Host "Skipping zone sync. Zone is currently being synced."
              }
          }

