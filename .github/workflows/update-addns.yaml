name: Update Boley AD DNS

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      repositoryName:
        required: false
        type: string
        description: "GitHub Repository Name."
        default: ${{ github.event.repository.name }}
      storageAccountName:
        required: false
        type: string
        description: "Storage Account for application information table."
        default: "amucloudapps"
      appInfoTableName:
        required: false
        type: string
        description: "Application information storage table."
        default: "DeployedApplications"
    secrets:
      domainController:
        required: true
        description: "Domain Controller Server Name."
      storageAccountKey:
        required: true

jobs:
  update-dns:
    runs-on: [self-hosted, Windows, boley]
    continue-on-error: false
    timeout-minutes: 10
    name: Update Boley DNS
    steps:
      - name: Retrieve Application information
        id: getappinfo
        uses: azure/powershell@v1.2.0
        with:
          inlineScript: |
            Install-Module -Name AzTable -Force
            Import-Module AzTable

            $storageAccountName = "${{ inputs.storageAccountName }}"
            $storageAccountKey = ${{ secrets.storageAccountKey }}
            $appInfoTableName = "${{ inputs.appInfoTableName }}"

            $storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey

            #Get Storage table
            try {
                $appInfoTable = (Get-AzStorageTable -Name $appInfoTableName -Context $storageContext -ErrorAction Stop).CloudTable 
                }
            catch {
                Write-Error -Message "Error accessing cloud $appInfoTableName table.  Error message was: $_.Exception.Message"
                return
                }

            $appInfo = Get-AzTableRow -Table $appInfoTable -PartitionKey "${{ inputs.repositoryName }}" -RowKey "${{ inputs.environment }}"

            echo "applicationName=$appInfo.ApplicationName" >> $env:GITHUB_ENV
            echo "version=$appInfo.Version" >> $env:GITHUB_ENV
            echo "keyVault=$appInfo.KeyVault" >> $env:GITHUB_ENV
            echo "hostName=$appInfo.HostName" >> $env:GITHUB_ENV
            echo "domainName=$appInfo.DomainName" >> $env:GITHUB_ENV
            echo "applicationIngressFqdn=$appInfo.IngressFqdn" >> $env:GITHUB_ENV
            echo "healthCheckPath=$appInfo.HealthCheckPath" >> $env:GITHUB_ENV
            echo "aksIngress=$appInfo.AksIngress" >> $env:GITHUB_ENV
          azPSVersion: "latest"

      - name: Update Internal Boley DNS
        run: |
          try {Add-DnsServerResourceRecordCName -Name "${{ env.hostName }}" -HostNameAlias "${{ env.aksIngress }}" -ZoneName "${{ env.domainName }}" -ComputerName ${{ secrets.domainController }} } catch {Write-Host "Record Already Exists"}
          Get-DnsServerResourceRecord -ZoneName "${{ env.domainName }}" -ComputerName ${{ secrets.domainController }} | Where-Object HostName -eq "${{ env.aksIngress }}" | Format-List
          try {Sync-DnsServerZone -Name "${{ env.domainName }}" -ComputerName ${{ secrets.domainController }}} catch {Write-Host "Skipping zone sync. Zone is currently being synced."}
