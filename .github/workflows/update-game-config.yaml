name: Update Game Configs

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      checkoutRef:
        required: false
        type: string
        description: "The branch, tag, or SHA to checkout"
        default: ${{ github.ref }}
      deploymentWebhook:
        required: false
        type: string
        description: "The webhook URL for the deployment status"
        default: ${{ vars.MSTEAMS_DEPLOYMENT_WEBHOOK }}
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  update:
    name: Update Game Configs
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkoutRef }}

      - name: Login via Az module
        uses: azure/login@v2
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          enable-AzPSSession: true

      - name: Generate .env file from Azure Key Vaults
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ inputs.environment }}

      - name: Install SimplySql PowerShell module
        shell: pwsh
        run: |
          Install-Module -Name SimplySql -RequiredVersion 1.9.1 -Force -AllowClobber

      - name: Install Azure PowerShell module
        shell: pwsh
        run: |
          Install-Module -Name Az -Force -AllowClobber

      - name: Update Game Configs
        shell: pwsh
        run: |
          $StorageAccountName = "gameconfigs"
          $StorageAccountTable = "GameConfigs"
          $UpdatedBy = "AMU Agents"
          $CDNBasePath = "gameconfigs.amuniversal.com"
          $CacheControl = "max-age=86400"

          Import-Module SimplySql
          Import-Module Az
          
          Function Get-MimeType {
              param (
                  [parameter(Mandatory = $true)]
                  [string]$FileExtension
              )
              switch ($FileExtension) {
                  ".png" { $MimeType = "image/png" }
                  ".json" { $MimeType = "application/json" }
                  ".jpg" { $MimeType = "image/jpeg" }
                  ".jpeg" { $MimeType = "image/jpeg" }
                  ".gif" { $MimeType = "image/gif" }
                  ".svg" { $MimeType = "image/svg" }
              }
          
              return $MimeType
          }
          
          $BasePath = Get-Location
          Write-Host "Base path is: $BasePath" -ForegroundColor DarkGray
          $GameConfigsBasePath = Join-Path $BasePath $StorageAccountName
          Write-Host "Game Configs base path is: $GameConfigsBasePath" -ForegroundColor DarkGray
          
          # Script has to be ran from project basepath
          if (!(Test-Path -Path $GameConfigsBasePath)) {
              $CurrentLocation = Get-Location
          
              $ErrorMessage = "Must be ran from project's base path.  Current location is: $CurrentLocation"
              Write-Error $ErrorMessage
              throw $ErrorMessage
          }
          
          # Set Storage Context
          $StorageContext = New-AzStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey "${{ env.STORAGE_ACCOUNT_KEY }}"
          
          try {
              $Connection = New-Object Npgsql.NpgsqlConnection;
              $Connection.ConnectionString = "${{ env.DB_CONNECTION_STRING }}"
              $Connection.Open()
          }
          catch {
              $ErrorMessage = "Connection Failed Error message was: $_.Exception.Message"
              Write-Error $ErrorMessage
              throw $ErrorMessage
          }
          
          # Remove Existing Storage Blobs
          Write-Host "Removing existing blobs in '${{ env.STORAGE_ACCOUNT_CONTAINER }}' container." -ForegroundColor DarkGray
          Get-AzStorageBlob -Container "${{ env.STORAGE_ACCOUNT_CONTAINER }}" -Context $StorageContext | Remove-AzStorageBlob
          
          # Remove entries in GameConfigs table.
          Write-Host "Removing current data in '$StorageAccountTable' table." -ForegroundColor DarkGray
          $DeleteQuery = "DELETE FROM ""$StorageAccountTable"""
          
          try {
              $Command = $Connection.CreateCommand()
              $Command.CommandText = $DeleteQuery
              [Void]$Command.ExecuteNonQuery()
          }
          catch {
              $ErrorMessage = "Error on Query. Query was: '$DeleteQuery'. Error is: $_.Exception.Message"
              Write-Error $ErrorMessage
              throw $ErrorMessage
          }
          
          
          $Features = Get-ChildItem -path $GameConfigsBasePath -Directory
          
          $Features | ForEach-Object {
              $FeatureId = $_.Name
              $Products = Get-ChildItem -Path (Join-Path $GameConfigsBasePath $FeatureId) -Directory
              $Products | ForEach-Object {
                  $Product = $_.Name
                  $GameFilesPath = $_.FullName
                  $GameFiles = Get-ChildItem -Path $GameFilesPath -File
                  $GameFiles | ForEach-Object {
                      $FileName = $_.name
                      $FilePath = $_.FullName
                      $FileMimeType = Get-MimeType($_.Extension)
          
                      if (!$FileMimeType) {
                          $ErrorMessage = "File type not included in MimeType list. Please add it before trying again."
                          Write-Error $ErrorMessage
                          throw $ErrorMessage
                      }
          
                      $BlobName = "$FeatureId/$Product/$FileName"
                      $BlobProperties = @{"ContentType" = $FileMimeType; "CacheControl" = $CacheControl; };
                      $BlobMetaData = @{"FeatureId" = $FeatureId }
          
                      # Create Blob
                      Write-Host "Updating Storage Blob Content with file: '$FilePath'" -ForegroundColor DarkGray
                      Set-AzStorageBlobContent -File $FilePath -Container "${{ env.STORAGE_ACCOUNT_CONTAINER }}" -Blob $BlobName -Properties $BlobProperties -Context $StorageContext `
                          -Metadata $BlobMetaData -Force
          
                      # Update Database
                      $UriPath = "$CDNBasePath/${{ env.STORAGE_ACCOUNT_CONTAINER }}/$BlobName"
                      $UpdateDate = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          
                      $InsertQuery = "INSERT INTO ""GameConfigs"" (""ConfigName"", ""UriPath"", ""MimeType"", ""OriginalFileName"", ""FeatureId"", ""CreatedDate"", ""CreatedBy"", `
                                                                  ""ModifiedDate"", ""ModifiedBy"", ""ActiveFlag"") `
                                                                  VALUES ('$Product', '$UriPath', '$FileMimeType', '$FileName', '$FeatureId', '$UpdateDate', '$UpdatedBy', '$UpdateDate', `
                                                                  '$UpdatedBy', '1') "
          
                      try {
                          $Command = $Connection.CreateCommand()
                          $Command.CommandText = $InsertQuery
                          [Void]$Command.ExecuteNonQuery()
                      }
                      catch {
                          $ErrorMessage = "Error on Query. Query was: $InsertQuery. Error is: $_.Exception.Message"
                          Write-Error $ErrorMessage
                          throw $ErrorMessage
                      }
                  }
              }
          
          }
          
          [Void]$Connection.Close()

      - name: Send Deployment report to Teams
        uses: skitionek/notify-microsoft-teams@master
        if: always() && ${{ inputs.environment != 'development' }}
        with:
          webhook_url: ${{ inputs.deploymentWebhook }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          overwrite: "{title: `${{ github.event.repository.name }} ${{ github.event.release.tag_name || '-' }} Deployment - ${{ inputs.environment }}`}"
