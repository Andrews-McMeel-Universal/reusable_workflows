name: Bump App Version

on:
  workflow_call:
    inputs:
      releaseType:
        required: true
        type: string
        description: Type of release
      environmentCharts:
        required: false
        type: boolean
        description: Set to true if the repository has separate Helm chart directories for each environment
        default: false
      bumpAppVersion:
        required: false
        type: boolean
        default: true
      bumpNugetVersion:
        required: false
        type: boolean
        default: false
    secrets:
      PAT_ACTION_CI:
        required: false

jobs:
  bump-app-versions:
    name: Bump App Versions
    if: ${{ inputs.bumpAppVersion == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get latest release
        id: latestrelease
        uses: thebritican/fetch-latest-release@v2.0.0

      - name: Get Chart.yaml appVersion
        if: inputs.environmentCharts == false
        id: chartyaml
        uses: rmeneely/get-yaml-value@v1
        with:
          infile: deployments/charts/Chart.yaml
          varlist: appVersion

      - name: Get Environment Chart.yaml appVersion
        if: inputs.environmentCharts == true
        id: environmentchartyaml
        uses: rmeneely/get-yaml-value@v1
        with:
          infile: deployments/production-charts/Chart.yaml
          varlist: appVersion

      - name: Check if package.json exists
        id: packagejsonfile
        uses: andstor/file-existence-action@v2
        with:
          files: "package.json"

      - name: Get package.json version
        if: steps.packagejsonfile.outputs.files_exists == 'true'
        id: packagejson
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: "package.json"
          prop_path: "version"

      - name: Gets next semantic release
        shell: pwsh
        run: |
          [Version]$a = "${{ steps.packagejson.outputs.prop || '0.0.0' }}"
          [Version]$b = "${{ steps.environmentchartyaml.outputs.values || steps.chartyaml.outputs.values || '0.0.0' }}"
          [Version]$c = "${{ steps.latestrelease.outputs.tag_name || '0.0.0' }}"

          $versions = [array]($a,$b,$c)
          $v = [version]($versions | Sort-Object -Descending | Select-Object -First 1)

          if ( "${{ inputs.releaseType }}" -match "major") {
            $release = [version]::New($v.Major+1,0,0)
          }
          elseif ( "${{ inputs.releaseType }}" -match "minor" ) {
            $release = [version]::New($v.Major,$v.Minor+1,0)
          }
          elseif ( "${{ inputs.releaseType }}" -match "patch" ) {
            $release = [version]::New($v.Major,$v.Minor,$v.Build+1)
          }

          echo "release=$release" >> $env:GITHUB_ENV
          echo "::notice::Bumping version to $release"

      - name: Update version in package.json
        if: steps.packagejsonfile.outputs.files_exists == 'true'
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: '"version": .*'
          replace: '"version": "${{ env.release }}",'
          regex: true
          include: "**package.json"

      - name: Update version in Chart.yaml
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "appVersion: .*"
          replace: "appVersion: ${{ env.release }}"
          regex: true
          include: "**Chart.yaml"

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "⬆️ Version bump: ${{ env.release }}"
          branch: maintenance/bump-version/${{ env.release }}
          committer: AMU Automations <amu_deploy@amuniversal.com>
          delete-branch: true
          title: "⬆️ Version bump: ${{ env.release }}"
          body: |
            Updating version to ${{ env.release }} in:
            - `**/Charts.yaml`
            - `**/package.json`
          labels: |
            maintenance

      - name: Auto Approve Version Update PR
        uses: hmarr/auto-approve-action@v3
        with:
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          github-token: ${{ secrets.PAT_ACTION_CI }}

  bump-nuget-version:
    name: Bump Nuget Version
    if: ${{ inputs.bumpNugetVersion == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check modified files
        id: files-changed
        run: |
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r FILE; do
            echo "${FILE}"
            if [ "${FILE}" == "*.Models/*" ]; then
              echo "models-changed=true" >> $GITHUB_OUTPUT
            fi
          done < files.txt

      - name: Run Increment-Version.ps1
        if: ${{ github.actor != 'amutechtest' && steps.files-changed.outputs.models-changed == 'true' }}
        shell: pwsh
        run: |
          param (
              [string]$ProjectName = (Split-Path -Path (Get-ChildItem ./ -Recurse | Where-Object { $_.PSIsContainer -and $_.Name.EndsWith(".Models")}) -Leaf)
          )

          # Get project file contents
          $ProjectFile = ($ProjectName + "/" + $ProjectName + ".csproj")
          $ProjectFileContents = Get-Content $ProjectFile -Raw

          # Get version from project file
          $VersionString = [RegEx]::Match($ProjectFileContents,"<Version>(.+?)</Version>")
          $Version = [version]([RegEx]::Match($VersionString,"((?:\d+\.\d+\.\d+))")).Value
          Write-Host ("Current Version: " + $Version) -ForegroundColor DarkGray

          # Bump version number
          if ($Version.Build -eq "9999") {
              $NewBuild = 0
          }
          else {
              $NewBuild = $Version.Build + 1
          }
          $NewVersion = ([string]$Version.Major + "." + [string]$Version.Minor + "." + [string]$NewBuild)
          Write-Host ("New Version: " + $NewVersion) -ForegroundColor DarkGray

          # Update version number in project file
          $ProjectFileContents = [RegEx]::Replace($ProjectFileContents, "<Version>(.+?)</Version>", ("<Version>" + $NewVersion + "</Version>"))
          Set-Content -Path $ProjectFile -Value $ProjectFileContents

          # Verify version number in project file
          $UpdatedVersionString = [RegEx]::Match((Get-Content $ProjectFile -Raw),"<Version>(.+?)</Version>")
          $UpdatedVersion = [version]([RegEx]::Match($UpdatedVersionString,"((?:\d+\.\d+\.\d+))")).Value
          if ($UpdatedVersion -eq $NewVersion) {
              Write-Host ('Version was updated correctly. Version string: "' + $UpdatedVersionString + '"') -ForegroundColor Green
          }
          else {
              Write-Error "Version not updated correctly. Version string: $UpdatedVersionString"
              exit 1
          }

      - name: Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_user_name: amutechtest
          commit_user_email: amu_deploy@amuniversal.com
          commit_message: ⬆️ Bump Nuget version