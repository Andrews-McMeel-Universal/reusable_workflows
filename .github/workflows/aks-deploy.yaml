on:
  workflow_call:
    inputs:
      aks_cluster_name:
        required: true
        type: string
        description: "Azure Kubernetes cluster name."
      aks_cluster_rg:
        required: true
        type: string
        description: "Azure Kubernetes cluster resource group."
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      container_registry:
        required: true
        type: string
        description: "Azure Container Registry name."
      image_pull_secret_name:
        required: true
        type: string
        description: "Name of K8s Imagepull Secret."
      docker_image_name:
        required: true
        type: string
        description: "Name for docker image."
      docker_image_tag:
        required: true
        type: string
        description: "Name for docker image tag."
      dockerfile_path:
        required: true
        type: string
        description: "Relative path to Dockerfile."
      configmap_path:
        required: false
        type: string
        description: "Relative path to K8s configmap yaml."
      secret_name:
        required: false
        type: string
        description: "Name for application Kubernetes secret."
      secret_value:
        required: false
        type: string
        description: "Value for application Kubernetes secret."
      aks_ingress_fqdn:
        required: true
        type: string
        description: "FQDN for Azure Kubernetes Ingress."
      application_hostname:
        required: true
        type: string
        description: "DNS Hostname for Application."
      application_domainname:
        required: true
        type: string
        description: "DNS Domainname for Application."
      dns_rg:
        required: true
        type: string
        description: "Azure Resource Group for DNS Domain."
      application_fqdn:
        required: true
        type: string
        description: "FQDN for Application."
      application_maximum_replicas:
        required: false
        type: string
        description: "Maximum number of replicas for the application HPA."
        default: 4
    secrets:
      azure_credentials:
        required: true
      registry_username:
        required: true
      registry_password:
        required: true
         
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: '${{ secrets.azure_credentials }}'
          enable-AzPSSession: true

      - name: Login to Azure Container Registry
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ env.container_registry }}
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_password }}
      
      - name: Set target AKS cluster
        uses: Azure/aks-set-context@v1
        with:
          creds: '${{ secrets.azure_credentials }}'
          cluster-name: ${{ inputs.aks_cluster_name }}
          resource-group: ${{ inputs.aks_cluster_rg }}

      - name: Switch to Deployment Namespace
        run: kubectl config set-context --current --namespace=${{ inputs.environment }}
      
      - name: Apply ConfigMap
        if: ${{ inputs.configmap_path != null }}
        uses: swdotcom/update-and-apply-kubernetes-configs@v1
        with:
          k8-config-file-paths: ${{ inputs.configmap_path }}
      
      - name: Add GitHub secrets to k8s
        if: ${{ inputs.secret_name != null }}
        uses: Azure/k8s-create-secret@v1
        with:
          namespace: ${{ inputs.environment }}
          secret-type: 'generic'
          arguments: ${{ inputs.secret_value }}
          secret-name: ${{ inputs.secret_name }}

      - name: Create or Update Public DNS Record
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $NewRecords = New-AzDnsRecordConfig -Cname ${{ inputs.aks_ingress_fqdn }};
            New-AzDnsRecordSet -Name "${{ inputs.application_hostname }}" -RecordType CNAME -ZoneName ${{ inputs.application_domainname }} -ResourceGroupName ${{ inputs.dns_rg }} -Ttl 3600 -DnsRecords $NewRecords -Overwrite;
          azPSVersion: '3.1.0'

      - name: Create k8s Image Pull Secret
        uses: Azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ inputs.container_registry }}
          container-registry-username: ${{ secrets.registry_username }}
          container-registry-password: ${{ secrets.registry_password }}
          secret-name: ${{ inputs.image_pull_secret_name }}

      - name: Build & Push Docker Image
        run: |
          docker build ${{ inputs.dockerfile_path }}  -t ${{ inputs.container_registry }}/${{ inputs.docker_image_name }}:${{ inputs.docker_image_tag }}
          docker push ${{ inputs.container_registry }}/${{ inputs.docker_image_name }}:${{ inputs.docker_image_tag }}

      
      - name: Create valid release-name
        id: generate-release-name
        run: |
          release=${{ inputs.docker_image_name }}-${{ inputs.docker_image_tag }}
          release=${release::53}
          release=$(echo ${release//[!0-9a-zA-Z]/-} | tr '[:upper:]' '[:lower:]' | sed -e 's/^-/z/' -e 's/-$/z/')
          echo ::set-output name=result::$release

      - name: Bake Helm templates
        uses: azure/k8s-bake@v1
        with:
          renderEngine: 'helm'
          helmChart: ${{ env.charts_path }}
          releaseName: ${{steps.generate-release-name.outputs.result}}
          helm-version: 'latest'
          overrides: |
            image.repository:${{ inputs.container_registry }}/${{ inputs.docker_image_name }}
            image.tag:${{ inputs.docker_image_tag }}
            ingress.host:${{ inputs.application_fqdn }}
            autoscaling.maxReplicas:${{ inputs.application_maximum_replicas }}
        id: bake

      - name: Deploy to Azure
        uses: Azure/k8s-deploy@v1
        with:
          namespace: ${{ inputs.environment }}
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            ${{ inputs.container_registry }}/${{ inputs.docker_image_name }}:${{ inputs.docker_image_tag }}
          imagepullsecrets: |
            ${{ inputs.image_pull_secret_name }}
