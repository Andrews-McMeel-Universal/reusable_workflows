name: AKS Deployment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Deploy Environment.  This is used to pull in and set the github environment. Can be development, staging, or production.'
      environmentKeyVault:
        required: true
        type: string
        description: 'AKS Key vault.'
      repositoryName:
        required: true
        type: string
        description: 'GitHub Repository Name.'
      clusterName:
        required: true
        type: string
        description: 'AKS Cluster name.'
      clusterResourceGroup:
        required: true
        type: string
        description: 'AKS Cluster Resource Group.'
      aksIngressFqdn:
        required: true
        type: string
        description: 'FQDN for AKS cluster ingress.'
      dnsResourceGroup:
        required: true
        type: string
        description: 'DNS Resource Group.'
      chartsPath:
        required: true
        type: string
        description: 'Relative path to Helm charts.'
      dockerFilePath:
        required: true
        type: string
        description: 'Relative path to Dockerfile.'
      dockerImageName:
        required: true
        type: string
        description: 'Docker image name.'
      dockerImageTag:
        required: true
        type: string
        description: 'Docker image tag.'
      maximumReplicas:
        required: false
        type: string
        description: 'Maximum number of replicas for the application HPA.'
        default: 30
      storageAccountName:
        required: true
        type: string
        description: 'Storage Account for application information table.'
      appInfoTableName:
        required: true
        type: string
        description: 'Application information storage table.'
      deploymentTimeout:
        required: false
        type: number
        description: 'Timeout for GitHub deployments'
        default: 20
      webAuthentication:
        required: false
        type: string
        description: 'Enable web authentication'
        default: false
      ingressWhitelist:
        required: false
        type: string
        description: 'IPs to include in the application whitelist'
        default: "0.0.0.0/0"
      adminIngressWhitelist:
        required: false
        type: string
        description: 'IPs to include in the Admin application whitelist'
        default: "207.67.20.252"
      environmentIngress:
        required: false
        type: string
        description: 'Add the environment name to the front of the hostname (for DNS)'
        default: true
      registryHostname:
        required: false
        type: string
        description: 'Container Registry Hostname'
        default: "amuappimages201.azurecr.io"
    secrets:
      azureCredentials:
        required: true
      registryUserName:
        required: true
      registryPassword:
        required: true
      storageAccountKey:
        required: true
      webAuthenticationPassword:
        required: false
      webAuthenticationUsername:
        required: false

jobs:
  setup:
    name: 'Prepare for build'
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract Helm values
        id: setenvs
        shell: pwsh
        run: |
          Install-Module -Name powershell-yaml -Confirm:$false -Force
          Function Get-Envs {
            param (
                [parameter(Mandatory = $true, ValueFromPipeline = $true)]
                [string]$PathToYaml
            )
              Import-Module powershell-yaml
              Write-Host "Getting configuration from: $PathToYaml."
              $Values = Get-Content $PathToYaml | ConvertFrom-Yaml
              return $Values
          }


          $appEnvironment= "${{ inputs.environment }}"
          $basePath = Get-Location
          $valuesYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "values.yaml"
          $appConfig = Get-Envs -PathToYaml $valuesYamlPath
          $chartYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "Chart.yaml"
          $chartConfig= Get-Envs -PathToYaml $chartYamlPath
          $appName = $chartConfig.name
          $appVersion = $chartConfig.appVersion
          $appHealthCheck = $appconfig.deployment.healthCheckPath
          $configMap = $appConfig.deployment.configMap
          $configSecret = $appConfig.deployment.secret
          $imagePullSecret = "$appName-pull-secret"
          $appDeployDate = Get-Date
          $ingress = $appConfig.ingress.host
          $domainName = ($ingress.Split('.') | Select-Object -Last 2) -join '.'
          $environmentIngress = "${{ inputs.environmentIngress }}" -replace '"', '' -replace "'", ""
          $hostName = $ingress -replace $domainName, '' -replace "\.$", ""
          $ingressWhitelist = $($appConfig.ingress.annotations)."nginx.ingress.kubernetes.io/whitelist-source-range" ?? ${{ inputs.ingressWhitelist }}
          if $($appConfig.adminingress) {
            $adminIngressWhitelist = $($appConfig.adminingress.annotations)."nginx.ingress.kubernetes.io/whitelist-source-range" ?? ${{ inputs.adminIngressWhitelist }}
          }
          else {
            $adminIngressWhitelist = "undefined"
          }

          if ($environmentIngress -eq "true") {
            $ingress = "$appEnvironment.$ingress"
            if ($hostName.Length -gt 0) {
              $hostName = "$appEnvironment.$hostName"
            }
            else {
              $hostName = "$appEnvironment"
            }
          }
          else {
            if ($hostName.Length -eq 0) {
              $hostName = "www"
            }
          }
          
          $release = "$appName-${{ github.sha }}" -replace '(^.{53})(.*$)','$1'
          $release = ($release -replace '[^-\p{L}\p{Nd}]', '').ToLower() -replace '^-', '' -replace '-$', ''
          
          echo "appName=$appName" >> $env:GITHUB_ENV
          echo "appVersion=$appVersion" >> $env:GITHUB_ENV
          echo "appHealthCheck=$appHealthCheck" >> $env:GITHUB_ENV
          echo "configMap=$configMap" >> $env:GITHUB_ENV
          echo "configSecret=$configSecret" >> $env:GITHUB_ENV
          echo "ingress=$ingress" >> $env:GITHUB_ENV
          echo "domainName=$domainName" >> $env:GITHUB_ENV
          echo "hostName=$hostName" >> $env:GITHUB_ENV
          echo "imagePullSecret=$imagePullSecret" >> $env:GITHUB_ENV
          echo "date=$(date +'%m/%d/%YT%H:%M:%S')" >> $env:GITHUB_ENV
          echo "ingressWhitelist=$ingressWhitelist" >> $env:GITHUB_ENV
          echo "adminIngressWhitelist=$adminIngressWhitelist" >> $env:GITHUB_ENV
          echo "release=$release" >> $env:GITHUB_ENV

      - name: Login via Az module
        uses: azure/login@v1.4.7
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Generate .env file from Azure Key Vaults
        uses: azure/powershell@v1.2.0
        with:
          inlineScript: |
            $KeyVaultName = "${{ inputs.environmentKeyVault }}"
            $envSecrets = (Get-AzKeyVaultSecret -VaultName $KeyVaultName  | Where-Object {($_.ContentType -contains 'Env') -or ($_.ContentType -contains 'BuildArg Env')}).Name
            $envSecrets | ForEach-Object {
                $envName = $_.ToUpper()
                $envName = $envName.Replace("-","_")
                $envSecret = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $_).secretvalue | ConvertFrom-SecureString -AsPlainText
                $envFileContent = $envName + "=" + $envSecret
                Add-Content -Path ".env" -Value $envFileContent
            }
          azPSVersion: 'latest'

      - name: Set target AKS cluster
        uses: Azure/aks-set-context@v3.2
        with:
          cluster-name: ${{ inputs.clusterName }}
          resource-group: ${{ inputs.clusterResourceGroup }}

      - name: Switch to ${{ inputs.environment }} Namespace
        run: kubectl config set-context --current --namespace="${{ inputs.environment }}"

      - name: Apply configMap if it exists
        if: ${{ env.configMap != null }}
        uses: swdotcom/update-and-apply-kubernetes-configs@v1.2.0
        with:
          k8-config-file-paths: deployments/k8s/config-${{ inputs.environment }}.yaml

      - name: Add GitHub secrets to k8s
        shell: pwsh
        run: |
          if (kubectl get secret | Select-String "${{ env.configSecret }}") {
            kubectl delete secret "${{ env.configSecret }}"
          }
          kubectl create secret generic "${{ env.configSecret }}" --from-env-file .env

          if ( "${{ inputs.webAuthentication }}" -eq "true") {
            if (!"${{ secrets.webAuthenticationUsername }}" -or !"${{ secrets.webAuthenticationPassword }}") {
                echo "::error::Please make sure the 'webAuthenticationUsername' and 'webAuthenticationPassword' GitHub environment secrets are set correctly."
                exit 1
            }

            if (kubectl get secret | Select-String "${{ env.appName }}-basic-auth") {
              kubectl delete secret "${{ env.appName }}-basic-auth"
            }
            htpasswd -cb auth "${{ secrets.webAuthenticationUsername }}" "${{ secrets.webAuthenticationPassword }}"
            kubectl create secret generic "${{ env.appName }}-basic-auth" --from-file=auth
          }

      - name: Create K8s Image Pull Secret
        uses: Azure/k8s-create-secret@v4.0
        with:
          container-registry-url: ${{ inputs.registryHostName }}
          container-registry-username: ${{ secrets.registryUserName  }}
          container-registry-password: ${{ secrets.registryPassword  }}
          secret-name: "${{ env.imagePullSecret }}"

    outputs:
      appName: ${{ env.appName }}
      appVersion: ${{ env.appVersion }}
      appHealthCheck: ${{ env.appHealthCheck }}
      configMap: ${{ env.configMap }}
      configSecret: ${{ env.configSecret }}
      ingress: ${{ env.ingress }}
      domainName: ${{ env.domainName }}
      hostName: ${{ env.hostName }}
      imagePullSecret: ${{ env.imagePullSecret }}
      date: ${{ env.date }}
      ingressWhitelist: ${{ env.ingressWhitelist }}
      adminIngressWhitelist: ${{ env.adminIngressWhitelist }}
      release: ${{ env.release }}

  build:
    name: 'Build Docker Image'
    runs-on: ubuntu-latest
    needs: [setup]
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login via Az module
        uses: azure/login@v1.4.7
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Generate .env file from Azure Key Vaults
        uses: azure/powershell@v1.2.0
        with:
          inlineScript: |
            $KeyVaultName = "${{ inputs.environmentKeyVault }}"
            $envSecrets = (Get-AzKeyVaultSecret -VaultName $KeyVaultName  | Where-Object {($_.ContentType -contains 'Env') -or ($_.ContentType -contains 'BuildArg Env')}).Name
            $envSecrets | ForEach-Object {
                $envName = $_.ToUpper()
                $envName = $envName.Replace("-","_")
                $envSecret = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $_).secretvalue | ConvertFrom-SecureString -AsPlainText
                $envFileContent = $envName + "=" + $envSecret
                Add-Content -Path ".env" -Value $envFileContent
            }
          azPSVersion: 'latest'

      - name: Generate build args from Azure Key Vaults
        uses: azure/powershell@v1.2.0
        with:
          inlineScript: |
            $KeyVaultName = "${{ inputs.environmentKeyVault }}"
            $buildSecrets = (Get-AzKeyVaultSecret -VaultName $KeyVaultName  | Where-Object {($_.ContentType -contains 'BuildArg') -or ($_.ContentType -contains 'BuildArg Env')}).Name
            if ($buildSecrets.Count -gt 0) {
                $buildArgPredicate = ' --build-arg '
            }
            else {
                return
            }
            $buildSecrets | ForEach-Object {
                $argName = $_.ToUpper()
                $argName = $argName.Replace("-","_")
                $argSecret = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $_).secretvalue | ConvertFrom-SecureString -AsPlainText
                $buildArguments = $buildArguments + $buildArgPredicate + $argName + "=" + $argSecret
            }

            echo "buildArguments=$buildArguments" >> $env:GITHUB_ENV
          azPSVersion: 'latest'

      - name: Login to Azure Container Registry
        uses: Azure/docker-login@v1.0.1
        with:
          login-server: ${{ inputs.registryHostName }}
          username: ${{ secrets.registryUserName }}
          password: ${{ secrets.registryPassword }}

      - name: Build & Push Docker Image
        run: |
          docker build ${{ inputs.dockerFilePath }} ${{ env.buildArguments }} -t "${{ inputs.registryHostName }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}"
          docker push "${{ inputs.registryHostName }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}"

      - name: Create values override file
        run: |
          WEB_AUTHENTICATION=$(echo "${{ inputs.webAuthentication }}" | tr -d "'" | tr -d '"')
          INGRESS_WHITELIST="${{ needs.setup.outputs.ingressWhitelist }}"
          ADMIN_INGRESS_WHITELIST="${{ needs.setup.outputs.adminIngressWhitelist }}"

          if [[ "${WEB_AUTHENTICATION}" == "true" ]] ; then
            if [[ "${ADMIN_INGRESS_WHITELIST}" != "undefined" ]] ; then
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
              nginx.ingress.kubernetes.io/auth-type: "basic"
              nginx.ingress.kubernetes.io/auth-secret: "${{ needs.setup.outputs.appName }}-basic-auth"
              nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
          adminingress:
            annotations:
              nginx.ingress.kubernetes.io/whitelist-source-range: "${ADMIN_INGRESS_WHITELIST}"
          EOF
            else
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
              nginx.ingress.kubernetes.io/auth-type: "basic"
              nginx.ingress.kubernetes.io/auth-secret: "${{ needs.setup.outputs.appName }}-basic-auth"
              nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
          EOF
            fi
          elif [[ "${ADMIN_INGRESS_WHITELIST}" == "undefined" ]] ; then
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
          adminingress:
            annotations:
              nginx.ingress.kubernetes.io/whitelist-source-range: "${ADMIN_INGRESS_WHITELIST}"
          EOF
          else
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
          EOF
          fi

      - name: Bake Helm Templates
        id: bake
        uses: azure/k8s-bake@v2.4
        with:
          renderEngine: 'helm'
          helmChart: ${{ inputs.chartsPath }}
          releaseName: ${{ needs.setup.outputs.release }}
          helm-version: 'latest'
          overrideFiles: ./values-override.yaml
          overrides: |
            image.repository:${{ inputs.registryHostName }}/${{ inputs.dockerImageName }}
            image.tag:${{ inputs.dockerImageTag }}
            ingress.host:${{ needs.setup.outputs.ingress }}
            autoscaling.maxReplicas:${{ inputs.maximumReplicas }}

      - name: Upload bake-manifests-bundle artifact
        uses: actions/upload-artifact@v3
        with:
          name: bake-manifests-bundle
          path: ${{ steps.bake.outputs.manifestsBundle }}
          retention-days: 1

    outputs:
      manifestsBundle: ${{ steps.bake.outputs.manifestsBundle }}

  deploy:
    name: 'Deploy to AKS cluster'
    needs: [setup,build]
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Download bake-manifests-bundle artifact
        uses: actions/download-artifact@v3
        with:
          name: bake-manifests-bundle
          path: ${{ needs.build.outputs.manifestsBundle }}

      - name: Login via Az module
        uses: azure/login@v1.4.7
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Set target AKS cluster
        uses: Azure/aks-set-context@v3.2
        with:
          cluster-name: ${{ inputs.clusterName }}
          resource-group: ${{ inputs.clusterResourceGroup }}

      - name: Deploy to Azure Kubernetes Service
        timeout-minutes: ${{ inputs.deploymentTimeout }}
        uses: Azure/k8s-deploy@v4.9
        with:
          namespace: ${{ inputs.environment }}
          manifests: ${{ needs.build.outputs.manifestsBundle }}
          images: |
            "${{ inputs.registryHostName }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}"
          imagePullSecrets: |
            "${{ needs.setup.outputs.imagePullSecret }}"
          pull-images: false

  update-records:
    name: Update deployment records
    needs: [setup,build,deploy]
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Login via Az module
        uses: azure/login@v1.4.7
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Create or Update Public DNS Record
        uses: azure/powershell@v1.2.0
        with:
          inlineScript: |
            $NewRecords = New-AzDnsRecordConfig -Cname ${{ inputs.aksIngressFqdn }};
            New-AzDnsRecordSet -Name "${{ needs.setup.outputs.hostName }}" -RecordType CNAME -ZoneName "${{ needs.setup.outputs.domainName }}" -ResourceGroupName ${{ inputs.dnsResourceGroup }} -Ttl 3600 -DnsRecords $NewRecords -Overwrite;
          azPSVersion: "latest"

      - name: Record deployment information in Azure Storage Table
        uses: LadyCailin/azure-table-storage-upload@v1.0.1
        with:
          table_name: "${{ inputs.appInfoTableName }}"
          partition_key: "${{ inputs.repositoryName }}"
          row_key: "${{ inputs.environment }}"
          data: "ApplicationName=${{ needs.setup.outputs.appName }} Version=${{ needs.setup.outputs.appVersion }} KeyVault=${{ inputs.environmentKeyVault }} HostName=${{ needs.setup.outputs.hostName }} DomainName=${{ needs.setup.outputs.domainName }} IngressFqdn=${{ needs.setup.outputs.ingress }} HealthCheckPath=${{ needs.setup.outputs.appHealthCheck }} AksIngress=${{ inputs.aksIngressFqdn }} Cluster=${{ inputs.clusterName }} ClusterResourceGroup=${{ inputs.clusterResourceGroup }} ConfigSecret=${{needs.setup.outputs.configSecret }} ConfigMap=${{ needs.setup.outputs.configMap }} LastDeploy=${{ needs.setup.outputs.date }}"
          if_exists: 'replace'
          extra_args: ''
          connection_string: "AccountName=${{ inputs.storageAccountName }};AccountKey=${{ secrets.storageAccountKey }}"

      - name: Create deployment summary
        run: |
          echo "### ${{ needs.setup.outputs.appName }} Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Application Name**: ${{ needs.setup.outputs.appName }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.setup.outputs.appVersion }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Key Vault Name**: ${{ inputs.environmentKeyVault }}" >> $GITHUB_STEP_SUMMARY
          echo "- **FQDN**: ${{ needs.setup.outputs.ingress }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: ${{ inputs.clusterName }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ConfigSecret**: ${{ needs.setup.outputs.configSecret }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ConfigMap**: ${{ needs.setup.outputs.configMap }}" >> $GITHUB_STEP_SUMMARY