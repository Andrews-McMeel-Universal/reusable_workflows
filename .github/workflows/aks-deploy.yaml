name: AKS Deployment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy Environment.  This is used to pull in and set the github environment. Can be development, staging, or production."
      environmentKeyVault:
        required: false
        type: string
        description: "AKS Key vault."
      clusterResourceGroup:
        required: false
        type: string
        description: "AKS Cluster Resource Group."
        default: ${{ vars.AKS_CLUSTER_RESOURCE_GROUP }}
      chartsPath:
        required: false
        type: string
        description: "Relative path to Helm charts."
        default: "./deployments/charts"
      dockerFilePath:
        required: false
        type: string
        description: "Relative path to Dockerfile."
        default: "."
      maximumReplicas:
        required: false
        type: string
        description: "Maximum number of replicas for the application HPA."
        default: "30"
      deploymentTimeout:
        required: false
        type: number
        description: "Timeout for GitHub deployments"
        default: 20
      webAuthentication:
        required: false
        type: string
        description: "Enable web authentication"
        default: "false"
      ingressWhitelist:
        required: false
        type: string
        description: "IPs to include in the application whitelist"
        default: ${{ vars.KUBERNETES_INGRESS_WHITELIST }}
      adminIngressWhitelist:
        required: false
        type: string
        description: "IPs to include in the Admin application whitelist"
        default: "207.67.20.252"
      environmentIngress:
        required: false
        type: string
        description: "Add the environment name to the front of the hostname (for DNS)"
        default: "true"
      environmentNamespace:
        required: false
        type: boolean
        description: "Enable/Disable adding environment in AKS cluster ingress DNS record"
        default: true
      enableNginxAccessLogging:
        required: false
        type: string
        description: Enable access logging in Kubernetes ingress
        default: "false"
      checkoutRef:
        required: false
        type: string
        description: "The branch, tag or SHA to checkout"
        default: ${{ github.ref }}
      githubRunner:
        required: false
        type: string
        description: "The type of runner to use"
        default: ${{ vars.CUSTOM_GITHUB_RUNNER || 'ubuntu-latest' }}
      deploymentWebhook:
        required: false
        type: string
        description: "The webhook URL for the deployment status"
        default: ${{ vars.MSTEAMS_DEPLOYMENT_WEBHOOK }}
      checkoutSubmodules:
        required: false
        type: string
        description: "Check out submodules"
        default: ${{ vars.GIT_CHECKOUT_SUBMODULES }}
    secrets:
      azureClusterName:
        required: true
      azureCredentials:
        required: true
      registryHostName:
        required: true
      registryUserName:
        required: true
      registryPassword:
        required: true
      storageAccountKey:
        required: true
      webAuthenticationPassword:
        required: false
      webAuthenticationUsername:
        required: false
      PAT_ACTION_CI:
        required: false

jobs:
  build:
    name: Build Docker Image
    runs-on: ${{ inputs.githubRunner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkoutRef }}
          submodules: ${{ inputs.checkoutSubmodules }}
          token: ${{ secrets.PAT_ACTION_CI || github.token }}

      - name: Extract Helm values
        id: setenvs
        shell: pwsh
        run: |
          $basePath = Get-Location
          $valuesYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "values.yaml"
          $appConfig = Get-Content $valuesYamlPath | ConvertFrom-Yaml
          $chartYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "Chart.yaml"
          $chartConfig = Get-Content $chartYamlPath | ConvertFrom-Yaml

          # Set app name
          $appName = $chartConfig.name
          Write-Output "appName=$appName" >> $env:GITHUB_ENV

          # Set app version
          $appVersion = $chartConfig.appVersion
          Write-Output "appVersion=$appVersion" >> $env:GITHUB_ENV

          # Set the max replicas based on the environment
          $appEnvironment = "${{ inputs.environment }}"
          if ($appEnvironment -eq "development") {
              $maxReplicas = 2
          }
          elseif ($appEnvironment -eq "staging") {
              $maxReplicas = 4
          }
          else {
              $maxReplicas = $appConfig.autoscaling.maxReplicas
          }
          Write-Output "maxReplicas=$maxReplicas" >> $env:GITHUB_ENV

          # Set image tag
          $release = "$appName-${{ github.sha }}" -replace '(^.{53})(.*$)', '$1'
          $release = ($release -replace '[^-\p{L}\p{Nd}]', '').ToLower() -replace '^-', '' -replace '-$', ''
          Write-Output "release=$release" >> $env:GITHUB_ENV

          # Set hostname and domain name for the ingress
          if ($appConfig.ingress.host[0] -gt 1) {
              $ingress = $appConfig.ingress.host[0]
          }
          else {
              $ingress = $appConfig.ingress.host
          }
          $domainName = ($ingress.Split('.') | Select-Object -Last 2) -join '.'
          $hostName = $ingress -replace $domainName, '' -replace "\.$", ""
          $environmentIngress = "${{ inputs.environmentIngress }}" -replace '"', '' -replace "'", ""
          if ($environmentIngress -eq "true") {
              $ingress = "$appEnvironment.$ingress"
              if ($hostName.Length -gt 0) {
                  $hostName = "$appEnvironment.$hostName"
              }
              else {
                  $hostName = "$appEnvironment"
              }
          }
          else {
              if ($hostName.Length -eq 0) {
                  $hostName = "www"
              }
          }
          Write-Output "ingress=$ingress" >> $env:GITHUB_ENV
          Write-Output "domainName=$domainName" >> $env:GITHUB_ENV
          Write-Output "hostName=$hostName" >> $env:GITHUB_ENV

      - name: Generate .env file from Azure Key Vaults
        id: get-envs
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.azureCredentials }}
          environment: ${{ inputs.environment }}
          environmentKeyVault: ${{ inputs.environmentKeyVault }}
          contentTypes: BuildArg Env

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.registryHostName }}
          username: ${{ secrets.registryUserName }}
          password: ${{ secrets.registryPassword }}

      - name: Build Docker Image
        run: |
          REGISTRY_REPO="${{ secrets.registryHostName }}/${{ github.event.repository.name }}"
          IMAGE_NAME="${REGISTRY_REPO}:${{ github.sha }}-${{ inputs.environment }}"
          docker build ${{ steps.get-envs.outputs.buildArguments }} -t "${IMAGE_NAME}" ${{ inputs.dockerFilePath }}

      - name: Enable write access if image has already been deployed
        run: |
          IMAGE_MANIFEST=$(az acr repository show --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}" --query "digest" -o tsv || echo "")
          if [ -z "${IMAGE_MANIFEST}" ]; then
            echo "Failed to get current image manifest, proceeding with deployment."
          else
            echo "Enabling write access for image manifest."
            az acr repository update --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}@${IMAGE_MANIFEST}" --write-enabled true
          fi

      - name: Tag Docker Image
        run: |
          REGISTRY_REPO="${{ secrets.registryHostName }}/${{ github.event.repository.name }}"
          IMAGE_NAME="${REGISTRY_REPO}:${{ github.sha }}-${{ inputs.environment }}"
          if [[ "${{ inputs.environment }}" == "production" ]] ; then
            docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:latest"
            docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:stable"
          fi
          if [[ "${{ github.event.release.tag_name }}" != "" ]]; then
            docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:${{ github.event.release.tag_name }}"
            MAJOR_RELEASE=$(echo "${{ github.event.release.tag_name }}" | cut -d "." -f 1)
            docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:${MAJOR_RELEASE}"
          fi
          docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:${{ inputs.environment }}"

      - name: Push Docker Image
        run: docker push -a "${{ secrets.registryHostName }}/${{ github.event.repository.name }}"

      - name: Send Failed Deployment report to Teams
        if: failure() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Failed ${{ inputs.environment }} Deployment"
          notification-color: 17a2b8
          timezone: America/Chicago
          verbose-logging: true
    outputs:
      appName: ${{ env.appName }}
      appVersion: ${{ env.appVersion }}
      configMap: ${{ env.configMap }}
      ingress: ${{ env.ingress }}
      domainName: ${{ env.domainName }}
      hostName: ${{ env.hostName }}
      date: ${{ env.date }}
      ingressWhitelist: ${{ env.ingressWhitelist }}
      adminIngressWhitelist: ${{ env.adminIngressWhitelist }}
      release: ${{ env.release }}
      maxReplicas: ${{ env.maxReplicas }}

  deploy:
    name: AKS Deploy
    needs: [build]
    runs-on: ${{ inputs.githubRunner }}
    continue-on-error: false
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ needs.build.outputs.ingress }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkoutRef }}

      - name: Create values override file
        shell: pwsh
        run: |
          $basePath = Get-Location
          $valuesYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "values.yaml"
          $appConfig = Get-Content $valuesYamlPath | ConvertFrom-Yaml
          $chartYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "Chart.yaml"
          $chartConfig = Get-Content $chartYamlPath | ConvertFrom-Yaml

          $appName = $chartConfig.name

          $webAuthentication = "${{ inputs.webAuthentication }}" -replace '"', '' -replace "'", ""
          $environment = ${{ inputs.environment }}
          $environmentIngress = "${{ inputs.environmentIngress }}" -replace '"', '' -replace "'", ""
          $ingressWhitelist = "${{ inputs.ingressWhitelist }}"
          $adminIngressWhitelist = "${{ inputs.adminIngressWhitelist }}"

          if ($appConfig.ingress[0]) {
              foreach ($item in $appConfig.ingress) {
                  # Add environment to ingress
                  if (($environmentIngress -eq "true") -and ($item.environmentIngress -eq $true)) { 
                      $item["host"] = "$environment.$($item['host'])"
                      Write-Output "Host updated to: $($item['host'])"
                  }

                  # Add WWW to ingress
                  if (($item.redirectToWWW -eq $true) -and ($environment -eq "production") -and ($environmentIngress -eq "false")) {
                      $item["host"] = "www.$($item['host'])"
                  }

                  # Add ingressClassName to ingress
                  $item["ingressClassName"] = "nginx-$environment"

                  # Reset annotations
                  $item["annotations"] = @{}

                  # Add ingressWhitelist to ingress
                  $item["annotations"]["nginx.ingress.kubernetes.io/whitelist-source-range"] = $ingressWhitelist
                  if ($item.name -eq "admin-ingress" -and $adminIngressWhitelist -ne "") {
                      $item["annotations"]["nginx.ingress.kubernetes.io/whitelist-source-range"] = $adminIngressWhitelist
                  }

                  # Add webAuthentication to main ingress
                  if ($webAuthentication -eq "true") {
                      foreach ($item in $appConfig.ingress[0]) {
                          $item["annotations"]["nginx.ingress.kubernetes.io/auth-type"]="basic"
                          $item["annotations"]["nginx.ingress.kubernetes.io/auth-secret"]="$appName-basic-auth"
                          $item["annotations"]["nginx.ingress.kubernetes.io/auth-realm"]="Authentication Required"
                      }
                  }
              }
          }
          elseif ($appConfig.GetEnumerator() | Where-Object { $_.Key -like "*ingress*" }) {
              foreach ($item in ($appConfig.GetEnumerator() | Where-Object { $_.Key -like "*ingress*" }).Value) {
                  # Add environment to ingress 
                  if (($item.host -notmatch "development|staging|production") -and ($item.secondaryhost -notmatch "www") -and ($environmentIngress -eq "true")){
                      $item.host = "$environment.$($item.host)"
                      Write-Output "Host updated to: $($item.host)"
                  }

                  # Add ingressClassName to ingress
                  $item.ingressClassName = "nginx-$environment"

                  # Reset annotations
                  $item.annotations = @{}

                  # Add ingressWhitelist to ingress
                  $item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = $ingressWhitelist
                  if ($item.name -eq "admin-ingress" -and $adminIngressWhitelist -ne "") {
                      $item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = $adminIngressWhitelist
                  }

                  # Add webAuthentication to main ingress
                  if ($webAuthentication -eq "true") {
                      $item.annotations."nginx.ingress.kubernetes.io/auth-type"="basic"
                      $item.annotations."nginx.ingress.kubernetes.io/auth-secret"="$appName-basic-auth"
                      $item.annotations."nginx.ingress.kubernetes.io/auth-realm"="Authentication Required"
                  }
              }
          }

          # Delete redundant keys
          $appConfig.Remove("deployment")
          $appConfig.Remove("autoscaling")
          $appConfig.Remove("service")
          $appConfig.Remove("image")
          $appConfig.Remove("replicaCount")
          $appConfig.Remove("resources")
          $appConfig.Remove("volumes")
          $appConfig.Remove("cronjobs")

          # Write to file
          $appConfig | ConvertTo-Yaml | Out-File -FilePath "./values-override.yaml"

      - name: Bake Helm Templates
        id: bake
        uses: azure/k8s-bake@v3
        with:
          renderEngine: "helm"
          helmChart: ${{ inputs.chartsPath }}
          releaseName: ${{ needs.build.outputs.release }}
          helm-version: "latest"
          overrideFiles: ./values-override.yaml
          overrides: |
            image.repository:${{ secrets.registryHostName }}/${{ github.event.repository.name }}
            image.tag:${{ github.sha }}-${{ inputs.environment }}
            autoscaling.maxReplicas:${{ needs.build.outputs.maxReplicas || inputs.maximumReplicas }}

      - name: Generate .env file from Azure Key Vaults
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.azureCredentials }}
          environment: ${{ inputs.environment }}
          environmentKeyVault: ${{ inputs.environmentKeyVault }}

      - name: Set target AKS cluster
        uses: azure/aks-set-context@v4
        with:
          cluster-name: ${{ secrets.azureClusterName }}
          resource-group: ${{ inputs.clusterResourceGroup }}

      - name: Switch Kubernetes Namespace
        id: namespace
        run: |
          if [ "${{ inputs.environmentNamespace }}" == "true" ]; then
            kubectl config set-context --current --namespace="${{ inputs.environment }}"
            echo "namespace=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "namespace=default" >> $GITHUB_OUTPUT
          fi

      - name: Update .env Kubernetes secret
        run: |
          if kubectl get secret | grep -q "${{ needs.build.outputs.appName }}-config-secret"; then
              kubectl delete secret "${{ needs.build.outputs.appName }}-config-secret"
          fi
          kubectl create secret generic "${{ needs.build.outputs.appName }}-config-secret" --validate='warn' --from-env-file ${{ github.workspace }}/.env

      - name: Update basic web authentication Kubernetes secret
        run: |
          if [[ "${{ inputs.webAuthentication }}" == "true" ]]; then
              if [[ -z "${{ secrets.webAuthenticationUsername }}" ]] || [[ -z "${{ secrets.webAuthenticationPassword }}" ]]; then
                  echo "::error::Please make sure the 'webAuthenticationUsername' and 'webAuthenticationPassword' GitHub environment secrets are set correctly."
                  exit 1
              fi
          
              if kubectl get secret | grep -q "${{ needs.build.outputs.appName }}-basic-auth"; then
                  kubectl delete secret "${{ needs.build.outputs.appName }}-basic-auth"
              fi
              htpasswd -cb auth "${{ secrets.webAuthenticationUsername }}" "${{ secrets.webAuthenticationPassword }}"
              kubectl create secret generic "${{ needs.build.outputs.appName }}-basic-auth" --from-file=auth
          fi

      - name: Create K8s Image Pull Secret
        uses: azure/k8s-create-secret@v5
        with:
          container-registry-url: ${{ secrets.registryHostName }}
          container-registry-username: ${{ secrets.registryUserName  }}
          container-registry-password: ${{ secrets.registryPassword  }}
          secret-name: "${{ needs.build.outputs.appName }}-pull-secret"
          namespace: ${{ steps.namespace.outputs.namespace }}

      - name: Get previous image tag used in deployment
        id: get-previous-image
        run: |
          PREVIOUS_IMAGE=$(kubectl get deployment "${{ needs.build.outputs.appName }}" -n "${{ steps.namespace.outputs.namespace }}" -o=jsonpath='{$.spec.template.spec.containers[:1].image}' | awk -F '/' '{print $2}')
          if [ -z "${PREVIOUS_IMAGE}" ]; then
            echo "No previous image found, proceeding with deployment"
          else
            echo "Previous image found: ${PREVIOUS_IMAGE}"
          fi
          echo "previousImage=${PREVIOUS_IMAGE}" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Kubernetes Service
        timeout-minutes: ${{ inputs.deploymentTimeout }}
        uses: azure/k8s-deploy@v5
        with:
          namespace: ${{ steps.namespace.outputs.namespace }}
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            "${{ secrets.registryHostName }}/${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}"
          imagepullsecrets: |
            "${{ needs.build.outputs.appName }}-pull-secret"
          pull-images: false

      - name: Unlock and untag previous ACR image
        if: ${{ steps.get-previous-image.outputs.previousImage != '' }}
        run: |
          PREVIOUS_MANIFEST=$(az acr repository show --name "${{ secrets.registryHostName }}" --image "${{ steps.get-previous-image.outputs.previousImage }}" --query "digest" -o tsv || true)
          if [[ -n "$PREVIOUS_MANIFEST" ]] && [[ "${{ steps.get-previous-image.outputs.previousImage }}" != "${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}" ]]; then
            echo "Unlocking previous manifest: ${PREVIOUS_MANIFEST}"
            az acr repository update --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}@${PREVIOUS_MANIFEST}" --delete-enabled true --write-enabled true
            while read -r TAG; do
              SEMVER_REGEX="^[0-9]+\.[0-9]+\.[0-9]+$"
              if [[ ! "${TAG}" =~ $SEMVER_REGEX ]]; then
                echo "Untagging ${{ github.event.repository.name }}:${TAG}"
                az acr repository untag --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}:${TAG}"
              else
                echo "Skipping untagging ${{ github.event.repository.name }}:${TAG}"
              fi
            done < <(az acr repository show --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}@${PREVIOUS_MANIFEST}" --query "tags" -o tsv)
          elif [[ "${{ steps.get-previous-image.outputs.previousImage }}" == "${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}" ]]; then
            echo "Deployment image is the same as the current image. Skipping unlocking."
          else
            echo "Previous manifest could not be found. Skipping unlocking."
          fi

      - name: Disable delete access for newly deployed image
        run: |
          IMAGE_MANIFEST=$(az acr repository show --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}" --query "digest" -o tsv)
          if [ -z "${IMAGE_MANIFEST}" ]; then
            echo "Failed to get current image manifest"
          fi
          az acr repository update --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}@${IMAGE_MANIFEST}" --delete-enabled false

      - name: Create or Update Public DNS Record
        id: dns
        run: |
          if [ "${{ inputs.environmentNamespace }}" == "true" ]; then
            INGRESS="${{ secrets.azureClusterName }}-${{ inputs.environment }}"
          else
            INGRESS="${{ secrets.azureClusterName }}"
          fi
          AKS_INGRESS="${INGRESS}-ingress.centralus.cloudapp.azure.com."
          az network dns record-set cname set-record --resource-group "AMU_DNS_RG" --zone-name "${{ needs.build.outputs.domainName }}" --record-set-name "${{ needs.build.outputs.hostName }}" --cname "${AKS_INGRESS}" --ttl 3600

          echo "aksIngress=${AKS_INGRESS}" >> $GITHUB_OUTPUT

      - name: Get Current Date
        id: date
        run: |
          echo "date=$(date +'%m/%d/%YT%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Record deployment information in Azure Storage Table
        shell: pwsh
        run: |
          Install-Module -Name AzTable -Force
          Import-Module AzTable

          $storageAccountName = "amucloudapps"
          $storageAccountKey = ${{ secrets.storageAccountKey }}
          $appInfoTableName = "DeployedApplications"
          $storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey

          #Get Storage table
          try {
              $appInfoTable = (Get-AzStorageTable -Name $appInfoTableName -Context $storageContext -ErrorAction Stop).CloudTable
              }
          catch {
              Write-Error -Message "Error accessing cloud $appInfoTableName table.  Error message was: $_.Exception.Message"
              return
          }

          Add-AzTableRow `
              -Table $appInfoTable `
              -partitionKey "${{ github.event.repository.name }}" `
              -RowKey "${{ inputs.environment }}" `
              -property @{
              "ApplicationName"="${{ needs.build.outputs.appName }}";
              "Version"="${{ needs.build.outputs.appVersion }}";
              "KeyVault"="${{ inputs.environmentKeyVault }}";
              "HostName"="${{ needs.build.outputs.hostName }}";
              "DomainName"="${{ needs.build.outputs.domainName }}";
              "IngressFqdn"="${{ needs.build.outputs.ingress }}";
              "AksIngress"="${{ steps.dns.outputs.aksIngress }}";
              "Cluster"="${{ secrets.azureClusterName }}";
              "ClusterResourceGroup"="${{ inputs.clusterResourceGroup }}";
              "LastDeploy"="${{ steps.date.outputs.date }}"
              } -UpdateExisting | Out-Null

      - name: Create deployment summary
        run: |
          echo "### ${{ needs.build.outputs.appName }} Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Application Name**: ${{ needs.build.outputs.appName }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build.outputs.appVersion }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Key Vault Name**: ${{ inputs.environmentKeyVault }}" >> $GITHUB_STEP_SUMMARY
          echo "- **FQDN**: ${{ needs.build.outputs.ingress }}" >> $GITHUB_STEP_SUMMARY

      - name: Send Failed Deployment report to Teams
        if: failure() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Failed ${{ inputs.environment }} Deployment"
          notification-color: 17a2b8
          timezone: America/Chicago
          verbose-logging: true

      - name: Send Succeeded Deployment report to Teams
        if: success() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Successful ${{ inputs.environment }} Deployment"
          notification-color: 28a745
          timezone: America/Chicago
          verbose-logging: true