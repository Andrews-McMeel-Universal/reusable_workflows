name: AKS Deployment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy Environment.  This is used to pull in and set the github environment. Can be development, staging, or production."
      environmentKeyVault:
        required: false
        type: string
        description: "AKS Key vault."
      chartsPath:
        required: false
        type: string
        description: "Relative path to Helm charts."
        default: "./deployments/charts"
      dockerFilePath:
        required: false
        type: string
        description: "Relative path to Dockerfile."
        default: "."
      maximumReplicas:
        required: false
        type: string
        description: "Maximum number of replicas for the application HPA."
        default: ${{ vars.KUBERNETES_MAXIMUM_REPLICAS || '30' }}
      deploymentTimeout:
        required: false
        type: number
        description: "Timeout for GitHub deployments"
        default: 20
      webAuthentication:
        required: false
        type: string
        description: "Enable web authentication"
        default: "false"
      ingressWhitelist:
        required: false
        type: string
        description: "IPs to include in the application whitelist"
        default: ${{ vars.KUBERNETES_INGRESS_WHITELIST || '0.0.0.0/0' }}
      adminIngressWhitelist:
        required: false
        type: string
        description: "IPs to include in the Admin application whitelist"
        default: ${{ vars.KUBERNETES_ADMIN_INGRESS_WHITELIST || '207.67.20.252' }}
      environmentIngress:
        required: false
        type: string
        description: "Add the environment name to the front of the hostname (for DNS)"
        default: "true"
      serviceIngressWhitelist:
        required: false
        type: string
        description: "IPs to include in the service whitelist"
        default: ${{ vars.KUBERNETES_SERVICE_INGRESS_WHITELIST }}
      environmentNamespace:
        required: false
        type: boolean
        description: "Enable/Disable adding environment in AKS cluster ingress DNS record"
        default: true
      checkoutRef:
        required: false
        type: string
        description: "The branch, tag or SHA to checkout"
        default: ${{ github.ref }}
      githubRunner:
        required: false
        type: string
        description: "The type of runner to use"
        default: ${{ vars.CUSTOM_GITHUB_RUNNER || 'ubuntu-latest' }}
      deploymentWebhook:
        required: false
        type: string
        description: "The webhook URL for the deployment status"
        default: ${{ vars.MSTEAMS_DEPLOYMENT_WEBHOOK }}
      checkoutSubmodules:
        required: false
        type: string
        description: "Check out submodules"
        default: ${{ vars.GIT_CHECKOUT_SUBMODULES }}
      publishSentryRelease:
        required: false
        type: string
        description: "Publish Sentry release"
        default: ${{ vars.PUBLISH_SENTRY_RELEASE || 'true' }}
    secrets:
      azureClusterName:
        required: true
      azureCredentials:
        required: true
      registryHostName:
        required: true
      registryUserName:
        required: true
      registryPassword:
        required: true
      storageAccountKey:
        required: true
      webAuthenticationPassword:
        required: false
      webAuthenticationUsername:
        required: false
      PAT_ACTION_CI:
        required: false
      sentryAuthToken:
        required: false

jobs:
  build:
    name: Build Docker Image
    runs-on: ${{ inputs.githubRunner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkoutRef }}
          submodules: ${{ inputs.checkoutSubmodules }}
          token: ${{ secrets.PAT_ACTION_CI || github.token }}

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name powershell-yaml -Force

      - name: Extract Helm values
        id: setenvs
        shell: pwsh
        run: |
          # Get charts path
          $basePath = Get-Location
          if (Test-Path -Path (Join-Path $basePath "./deployments/${{ inputs.environment }}-charts")) {
              $chartsPath = "./deployments/${{ inputs.environment }}-charts"
          }
          else {
              $chartsPath = "./deployments/charts"
          }
          Write-Output "chartsPath=$chartsPath" >> $env:GITHUB_ENV
          Write-Output "Using charts path: $chartsPath"
          
          $valuesYamlPath = Join-Path $basePath $chartsPath "values.yaml"
          $appConfig = Get-Content $valuesYamlPath | ConvertFrom-Yaml
          $chartYamlPath = Join-Path $basePath $chartsPath "Chart.yaml"
          $chartConfig = Get-Content $chartYamlPath | ConvertFrom-Yaml

          # Set app name
          $appName = $chartConfig.name
          Write-Output "appName=$appName"
          Write-Output "appName=$appName" >> $env:GITHUB_ENV

          # Set app version
          $appVersion = $chartConfig.appVersion
          Write-Output "appVersion=$appVersion"
          Write-Output "appVersion=$appVersion" >> $env:GITHUB_ENV

          # Set the max replicas based on the environment
          $appEnvironment = "${{ inputs.environment }}"
          if ($appEnvironment -eq "development") {
              $maxReplicas = 2
          }
          elseif ($appEnvironment -eq "staging") {
              $maxReplicas = 4
          }
          else {
              $maxReplicas = $appConfig.autoscaling.maxReplicas
          }
          Write-Output "maxReplicas=$maxReplicas"
          Write-Output "maxReplicas=$maxReplicas" >> $env:GITHUB_ENV

          # Set image tag
          $release = "$appName-${{ github.sha }}" -replace '(^.{53})(.*$)', '$1'
          $release = ($release -replace '[^-\p{L}\p{Nd}]', '').ToLower() -replace '^-', '' -replace '-$', ''
          Write-Output "release=$release"
          Write-Output "release=$release" >> $env:GITHUB_ENV

          # Set ingress
          $environmentIngress = "${{ inputs.environmentIngress }}" -replace '"', '' -replace "'", ""
          if (($appConfig.schemaVersion -eq "2") -or ($chartConfig.version -ge "2.0.0")) {
              $ingress = ($appConfig.ingress | Where-Object { $_.Name -eq "ingress" }).host
              if (($appConfig.ingress.redirectToWWW -eq $true) -and ($appEnvironment -eq "production") -and ($environmentIngress -ne "true")) {
                  $wwwIngress = "true"
              }
          }
          else {
              $ingress = $appConfig.ingress.host
          }

          # Set domain name
          $domainName = ($ingress.Split('.') | Select-Object -Last 2) -join '.'

          Write-Output "domainName=$domainName"
          Write-Output "domainName=$domainName" >> $env:GITHUB_ENV
          Write-Output "ingress=$ingress"
          Write-Output "ingress=$ingress" >> $env:GITHUB_ENV
          Write-Output "wwwIngress=$wwwIngress"
          Write-Output "wwwIngress=$wwwIngress" >> $env:GITHUB_ENV

      - name: Generate .env file from Azure Key Vaults
        id: get-envs
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.azureCredentials }}
          environment: ${{ inputs.environment }}
          environmentKeyVault: ${{ inputs.environmentKeyVault }}
          contentTypes: BuildArg Env

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.registryHostName }}
          username: ${{ secrets.registryUserName }}
          password: ${{ secrets.registryPassword }}

      - name: Build Docker Image
        run: |
          REGISTRY_REPO="${{ secrets.registryHostName }}/${{ github.event.repository.name }}"
          IMAGE_NAME="${REGISTRY_REPO}:${{ github.sha }}-${{ inputs.environment }}"
          docker build ${{ steps.get-envs.outputs.buildArguments }} -t "${IMAGE_NAME}" ${{ inputs.dockerFilePath }}

      - name: Enable write access if image has already been deployed
        run: |
          IMAGE_MANIFEST=$(az acr repository show --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}" --query "digest" -o tsv || echo "")
          if [ -z "${IMAGE_MANIFEST}" ]; then
            echo "Failed to get current image manifest, proceeding with deployment."
          else
            echo "Enabling write access for image manifest."
            az acr repository update --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}@${IMAGE_MANIFEST}" --write-enabled true
          fi

      - name: Tag Docker Image
        run: |
          REGISTRY_REPO="${{ secrets.registryHostName }}/${{ github.event.repository.name }}"
          IMAGE_NAME="${REGISTRY_REPO}:${{ github.sha }}-${{ inputs.environment }}"
          if [[ "${{ inputs.environment }}" == "production" ]] ; then
            docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:latest"
            docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:stable"
          fi
          if [[ "${{ github.event.release.tag_name }}" != "" ]]; then
            docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:${{ github.event.release.tag_name }}"
            MAJOR_RELEASE=$(echo "${{ github.event.release.tag_name }}" | cut -d "." -f 1)
            docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:${MAJOR_RELEASE}"
          fi
          docker tag "${IMAGE_NAME}" "${REGISTRY_REPO}:${{ inputs.environment }}"

      - name: Push Docker Image
        run: docker push -a "${{ secrets.registryHostName }}/${{ github.event.repository.name }}"

      - name: Send Failed Deployment report to Teams
        if: failure() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Failed ${{ inputs.environment }} Deployment"
          notification-color: 17a2b8
          timezone: America/Chicago
          verbose-logging: true
    outputs:
      appName: ${{ env.appName }}
      appVersion: ${{ env.appVersion }}
      ingress: ${{ env.ingress }}
      domainName: ${{ env.domainName }}
      release: ${{ env.release }}
      maxReplicas: ${{ env.maxReplicas }}
      chartsPath: ${{ env.chartsPath }}
      wwwIngress: ${{ env.wwwIngress }}

  deploy:
    name: AKS Deploy
    needs: [build]
    runs-on: ${{ inputs.githubRunner }}
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ needs.build.outputs.ingress }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkoutRef }}

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name powershell-yaml -Force

      - name: Create values override file
        id: values-override
        shell: pwsh
        run: |
          # Get charts path
          $basePath = Get-Location
          $environment = "${{ inputs.environment }}"
          $chartsPath = "${{ needs.build.outputs.chartsPath }}"
          Write-Output "Using charts path: $chartsPath"
          
          $valuesYamlPath = Join-Path $basePath $chartsPath "values.yaml"
          $appConfig = Get-Content $valuesYamlPath | ConvertFrom-Yaml
          $chartYamlPath = Join-Path $basePath $chartsPath "Chart.yaml"
          $chartConfig = Get-Content $chartYamlPath | ConvertFrom-Yaml

          $appName = $chartConfig.name
          $appConfig.environment = $environment

          $webAuthentication = "${{ inputs.webAuthentication }}" -replace '"', '' -replace "'", ""
          $environmentIngress = "${{ inputs.environmentIngress }}" -replace '"', '' -replace "'", ""
          $adminIngressWhitelist = "${{ inputs.adminIngressWhitelist }}"
          $serviceIngressWhitelist = "${{ inputs.serviceIngressWhitelist }}"
          $clusterIssuer = "letsencrypt-prod"

          $domains = @()
          if (($appConfig.schemaVersion -eq "2") -or ($chartConfig.version -ge "2.0.0")) {
              $updatedIngress = @()
              foreach ($item in $appConfig.ingress) {
                  # Set ingress whitelist if not set
                  $ingressWhitelist = "${{ inputs.ingressWhitelist }}"
                  if (($item.name -ne "admin-ingress") -and ($ingressWhitelist -notmatch '^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.((25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.){2}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)(/(3[0-2]|[1-2]?[0-9]))?$')) {
                      Write-Output "Ingress whitelist not set for $($item.name)"
                      if (($ingressWhitelist -eq "service") -or ($item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" -match "207.67.20.239,40.86.103.124,40.77.105.170")) {
                          # Use service whitelist
                          Write-Output "Overriding ingress whitelist with service whitelist for $($item.name)"
                          $ingressWhitelist = $serviceIngressWhitelist
                      }
                      elseif ($item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range") {
                          # Use existing whitelist
                          Write-Output "Using existing ingress whitelist for $($item.name)"
                          $ingressWhitelist = $item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range"
                      } 
                      else {
                          # Default to 0.0.0.0/0
                          Write-Output "Defaulting to 0.0.0.0/0 ingress whitelist for $($item.name)"
                          $ingressWhitelist = "0.0.0.0/0"
                      }
                  }

                  # Add environment to ingress
                  if ($environmentIngress -ne "false") { 
                      $item.host = "$environment.$($item.host)"
                      Write-Output "Updating ingress host for $($item.name) to: $($item.host)"
                  }

                  # Add ingressClassName to ingress
                  $item.ingressClassName = "nginx-$environment"

                  # Reset annotations
                  if ($null -eq $item.annotations) {
                      $item.annotations = @{}
                  }

                  # Add cluster issuer annotation
                  $item.annotations."cert-manager.io/cluster-issuer" = $clusterIssuer

                  if ($item.name -eq "ingress") {
                      # Add WWW to ingress
                      if (($item.redirectToWWW -eq $true) -and ($environment -eq "production") -and ($environmentIngress -ne "true")) {
                          # Add www redirect ingress
                          $updatedIngress += [PSCustomObject]@{
                              name = "wwwredirect"
                              host = $item.host
                              path = "/(.*)"
                              ingressClassName = $item.ingressClassName
                              annotations = @{
                                  "nginx.ingress.kubernetes.io/rewrite-target" = "https://www.$($item.host)/$1"
                                  "cert-manager.io/cluster-issuer" = $clusterIssuer
                              }
                          }

                          Write-Output "Adding www to $($item.name) host"
                          $item.host = "www.$($item.host)"
                      }

                      # Set ingress host to primary domain variable
                      $dnsPrimaryDomain = $item.host

                      # Add webAuthentication to main ingress
                      if ($webAuthentication -eq "true") {
                          Write-Output "Adding basic auth to $($item.name)"
                          $item.annotations."nginx.ingress.kubernetes.io/auth-type"="basic"
                          $item.annotations."nginx.ingress.kubernetes.io/auth-secret"="$appName-basic-auth"
                          $item.annotations."nginx.ingress.kubernetes.io/auth-realm"="Authentication Required"
                      }
                  }
                  elseif ($item.name -eq "admin-ingress") {
                      if ($adminIngressWhitelist -ne "") {
                          $item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = $adminIngressWhitelist
                      }
                      else {
                          $item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = "207.67.20.252"
                      }
                      Write-Output "Setting ingress whitelist for $($item.name) to: $($item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range")"
                  }

                  # Add www redirect to ingress
                  if (($item.name -ne "ingress") -and ("${{ needs.build.outputs.wwwIngress }}" -eq "true") -and ($item.redirectToWWW -ne $false) -and ($item.host -match "${{ needs.build.outputs.ingress }}") -or (($item.name -ne "ingress") -and ($item.redirectToWWW -eq $true))) {
                      Write-Output "Adding www to $($item.name) host"
                      $item.host = "www.$($item.host)"
                  }

                  # Ensure the ingress whitelist is set for all other ingresses except admin-ingress
                  if ($item.name -ne "admin-ingress") {
                      # Add ingressWhitelist to ingress
                      Write-Output "Setting ingress whitelist for $($item.name) to: $ingressWhitelist"
                      $item.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = $ingressWhitelist
                  }

                  # Remove annotations if empty
                  if ($item.annotations.Count -eq 0) {
                      $item.Remove("annotations")
                  }

                  $updatedIngress += [PSCustomObject]@{
                      name = $item.name
                      host = $item.host
                      path = $item.path
                      ingressClassName = $item.ingressClassName
                      annotations = $item.annotations
                  }

                  # Add hostnames to domains variable
                      $domains += $item.host -replace "${{ needs.build.outputs.domainName }}", '' -replace "\.$", ""
                  }
              }
              # Ensure ingress is an array
              $appConfig.ingress = @($updatedIngress)
          }
          else {
              foreach ($item in ($appConfig.GetEnumerator() | Where-Object { $_.Key -like "*ingress*" })) {
                  # Reset ingress whitelist to input
                  $ingressWhitelist = "${{ inputs.ingressWhitelist }}"

                  # Set ingress whitelist if not set
                  if ($ingressWhitelist -notmatch '^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.((25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.){2}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)(/(3[0-2]|[1-2]?[0-9]))?$') {
                      Write-Output "Ingress whitelist not set for $($item.Key)"
                      if (($ingressWhitelist -eq "service") -or ($item.Value.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" -match "207.67.20.239,40.86.103.124,40.77.105.170")) {
                          # Use service whitelist
                          Write-Output "Overriding ingress whitelist with service whitelist for $($item.Key)"
                          $ingressWhitelist = $serviceIngressWhitelist
                      }
                      elseif ($item.Value.annotations."nginx.ingress.kubernetes.io/whitelist-source-range") {
                          # Use existing whitelist
                          Write-Output "Using existing ingress whitelist for $($item.Key)"
                          $ingressWhitelist = $item.Value.annotations."nginx.ingress.kubernetes.io/whitelist-source-range"
                      } 
                      else {
                          # Default to 0.0.0.0/0
                          Write-Output "Defaulting to 0.0.0.0/0 ingress whitelist for $($item.Key)"
                          $ingressWhitelist = "0.0.0.0/0"
                      }
                  }

                  # Add environment to ingress 
                  if (($item.Value.host -notmatch "development|staging|production") -and ($item.Value.secondaryhost -notmatch "www") -and ($environmentIngress -ne "false")){
                      $item.Value.host = "$environment.$($item.Value.host)"
                      Write-Output "Updating ingress host for $($item.Key) to: $($item.Value.host)"
                  }

                  # Add ingressClassName to ingress
                  $item.Value.ingressClassName = "nginx-$environment"

                  # Reset annotations
                  if ($null -eq $item.Value.annotations) {
                      $item.Value.annotations = @{}
                  }

                  # Add cluster issuer annotation
                  $item.Value.annotations."cert-manager.io/cluster-issuer" = $clusterIssuer

                  if ( $item.Key -eq "ingress" ) {
                      # Add ingressWhitelist to ingress
                      Write-Output "Setting ingress whitelist for $($item.Key) to: $ingressWhitelist"
                      $item.Value.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = $ingressWhitelist
                      
                      # Add webAuthentication to main ingress
                      if ($webAuthentication -eq "true") {
                          Write-Output "Adding basic auth to $($item.Key)"
                          $item.Value.annotations."nginx.ingress.kubernetes.io/auth-type"="basic"
                          $item.Value.annotations."nginx.ingress.kubernetes.io/auth-secret"="$appName-basic-auth"
                          $item.Value.annotations."nginx.ingress.kubernetes.io/auth-realm"="Authentication Required"
                      }

                      # Set ingress host to primary domain variable
                      $dnsPrimaryDomain = $item.Value.host
                  }
                  elseif (($item.Key -eq "adminingress" ) -and ($adminIngressWhitelist -ne "")){
                      # Add ingressWhitelist to admin ingress
                      Write-Output "Setting ingress whitelist for $($item.Key) to: $adminIngressWhitelist"
                      $item.Value.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = $adminIngressWhitelist
                  }

                  # Remove annotations if empty
                  if ($item.Value.annotations.Count -eq 0) {
                      $item.Value.Remove("annotations")
                  }

                  # Add hostnames to domains variable
                      $domains += $item.Value.host -replace "${{ needs.build.outputs.domainName }}", '' -replace "\.$", ""
                  }
              }
          }

          # Ensure the service annotations are set properly
          if ($appConfig.service) {
              # Ensure the service has annotations
              if ($null -eq $appConfig.service.annotations) {
                  $appConfig.service.annotations = @{}
              }
              # Ensure the service has the correct internal load balancer annotation
              if (-not $appConfig.service.annotations."service.beta.kubernetes.io/azure-load-balancer-internal") {
                  Write-Output "Setting service.beta.kubernetes.io/azure-load-balancer-internal annotation for the service"
                  $appConfig.service.annotations."service.beta.kubernetes.io/azure-load-balancer-internal" = "true"
              }
          }
          else {
              Write-Output "No service found in values.yaml to set internal load balancer annotation."
          }

          # Remove www redirect ingress if not production
          if ($environment -ne "production") {
              $appConfig.ingress = $appConfig.ingress | Where-Object { $_.name -ne "wwwredirect" }
          }

          # Store keys to remove in a separate list
          $keysToRemove = @()

          foreach ($key in $appConfig.Keys) {
              if (($key -ne "ingress") -and ($key -ne "environment") -and ($key -ne "service")) {
                  $keysToRemove += $key
              }
          }

          # Remove keys from the original collection
          foreach ($key in $keysToRemove) {
              $appConfig.Remove($key)
          }

          # Write to file
          $appConfig | ConvertTo-Yaml | ForEach-Object { $_ -replace "  name:", "- name:" } | Out-File -FilePath "./values-override.yaml"

          # Output file content
          Write-Output "---"
          Write-Output "# Source: values-override.yaml"
          Get-Content "./values-override.yaml"

          # Set domains
          Write-Output "---"
          Write-Output "# Source: DNS domains"
          Write-Output "domains=$domains"
          Write-Output "domains=$domains" >> $env:GITHUB_ENV
          Write-Output "dnsPrimaryDomain=$dnsPrimaryDomain"
          Write-Output "dnsPrimaryDomain=$dnsPrimaryDomain" >> $env:GITHUB_ENV

      - name: Bake Helm Templates
        id: bake
        uses: azure/k8s-bake@v3
        with:
          renderEngine: "helm"
          helmChart: ${{ needs.build.outputs.chartsPath }}
          releaseName: ${{ needs.build.outputs.release }}
          helm-version: "latest"
          overrideFiles: ./values-override.yaml
          overrides: |
            deployment.image.repository:${{ secrets.registryHostName }}/${{ github.event.repository.name }}
            deployment.image.tag:${{ github.sha }}-${{ inputs.environment }}
            image.repository:${{ secrets.registryHostName }}/${{ github.event.repository.name }}
            image.tag:${{ github.sha }}-${{ inputs.environment }}
            autoscaling.maxReplicas:${{ needs.build.outputs.maxReplicas }}

      - name: Generate .env file from Azure Key Vaults
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.azureCredentials }}
          environment: ${{ inputs.environment }}
          environmentKeyVault: ${{ inputs.environmentKeyVault }}

      - name: Get AKS cluster resource group
        id: aks-resource-group
        run: |
          AKS_RESOURCE_GROUP=$(az aks list --query "[?name == '${{ secrets.azureClusterName }}'].resourceGroup" -o tsv)
          echo "AKS_RESOURCE_GROUP=${AKS_RESOURCE_GROUP}" >> $GITHUB_OUTPUT

      - name: Set target AKS cluster
        uses: azure/aks-set-context@v4
        with:
          cluster-name: ${{ secrets.azureClusterName }}
          resource-group: ${{ steps.aks-resource-group.outputs.AKS_RESOURCE_GROUP }}

      - name: Switch Kubernetes Namespace
        id: namespace
        run: |
          if [ "${{ inputs.environmentNamespace }}" == "true" ]; then
            kubectl config set-context --current --namespace="${{ inputs.environment }}"
            echo "namespace=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "namespace=default" >> $GITHUB_OUTPUT
          fi

      - name: Update .env Kubernetes secret
        run: |
          if kubectl get secret | grep -q "${{ needs.build.outputs.appName }}-config-secret"; then
              kubectl delete secret "${{ needs.build.outputs.appName }}-config-secret"
          fi
          kubectl create secret generic "${{ needs.build.outputs.appName }}-config-secret" --validate='warn' --from-env-file ${{ github.workspace }}/.env

      - name: Update basic web authentication Kubernetes secret
        run: |
          if [[ "${{ inputs.webAuthentication }}" == "true" ]]; then
              if [[ -z "${{ secrets.webAuthenticationUsername }}" ]] || [[ -z "${{ secrets.webAuthenticationPassword }}" ]]; then
                  echo "::error::Please make sure the 'webAuthenticationUsername' and 'webAuthenticationPassword' GitHub environment secrets are set correctly."
                  exit 1
              fi
          
              if kubectl get secret | grep -q "${{ needs.build.outputs.appName }}-basic-auth"; then
                  kubectl delete secret "${{ needs.build.outputs.appName }}-basic-auth"
              fi
              htpasswd -cb auth "${{ secrets.webAuthenticationUsername }}" "${{ secrets.webAuthenticationPassword }}"
              kubectl create secret generic "${{ needs.build.outputs.appName }}-basic-auth" --from-file=auth
          fi

      - name: Create K8s Image Pull Secret
        uses: azure/k8s-create-secret@v5
        with:
          container-registry-url: ${{ secrets.registryHostName }}
          container-registry-username: ${{ secrets.registryUserName  }}
          container-registry-password: ${{ secrets.registryPassword  }}
          secret-name: "${{ needs.build.outputs.appName }}-pull-secret"
          namespace: ${{ steps.namespace.outputs.namespace }}

      - name: Get previous image tag used in deployment
        id: get-previous-image
        run: |
          PREVIOUS_IMAGE=$(kubectl get deployment "${{ needs.build.outputs.appName }}" -n "${{ steps.namespace.outputs.namespace }}" -o=jsonpath='{$.spec.template.spec.containers[:1].image}' | awk -F '/' '{print $2}')
          if [ -z "${PREVIOUS_IMAGE}" ]; then
            echo "No previous image found, proceeding with deployment"
          else
            echo "Previous image found: ${PREVIOUS_IMAGE}"
          fi
          echo "previousImage=${PREVIOUS_IMAGE}" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Kubernetes Service
        timeout-minutes: ${{ inputs.deploymentTimeout }}
        uses: azure/k8s-deploy@v5
        with:
          namespace: ${{ steps.namespace.outputs.namespace }}
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            "${{ secrets.registryHostName }}/${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}"
          imagepullsecrets: |
            "${{ needs.build.outputs.appName }}-pull-secret"
          pull-images: false

      - name: Unlock and untag previous ACR image
        if: ${{ steps.get-previous-image.outputs.previousImage != '' }}
        run: |
          PREVIOUS_MANIFEST=$(az acr repository show --name "${{ secrets.registryHostName }}" --image "${{ steps.get-previous-image.outputs.previousImage }}" --query "digest" -o tsv || true)
          if [[ -n "$PREVIOUS_MANIFEST" ]] && [[ "${{ steps.get-previous-image.outputs.previousImage }}" != "${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}" ]]; then
            echo "Unlocking previous manifest: ${PREVIOUS_MANIFEST}"
            az acr repository update --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}@${PREVIOUS_MANIFEST}" --delete-enabled true --write-enabled true
            while read -r TAG; do
              SEMVER_REGEX="^[0-9]+\.[0-9]+\.[0-9]+$"
              if [[ ! "${TAG}" =~ $SEMVER_REGEX ]]; then
                echo "Untagging ${{ github.event.repository.name }}:${TAG}"
                az acr repository untag --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}:${TAG}"
              else
                echo "Skipping untagging ${{ github.event.repository.name }}:${TAG}"
              fi
            done < <(az acr repository show --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}@${PREVIOUS_MANIFEST}" --query "tags" -o tsv)
          elif [[ "${{ steps.get-previous-image.outputs.previousImage }}" == "${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}" ]]; then
            echo "Deployment image is the same as the current image. Skipping unlocking."
          else
            echo "Previous manifest could not be found. Skipping unlocking."
          fi

      - name: Disable delete access for newly deployed image
        run: |
          IMAGE_MANIFEST=$(az acr repository show --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}:${{ github.sha }}-${{ inputs.environment }}" --query "digest" -o tsv)
          if [ -z "${IMAGE_MANIFEST}" ]; then
            echo "Failed to get current image manifest"
          fi
          az acr repository update --name "${{ secrets.registryHostName }}" --image "${{ github.event.repository.name }}@${IMAGE_MANIFEST}" --delete-enabled false

      - name: Create or Update Public DNS Record
        id: dns
        run: |
          # Set AKS cluster ingress
          if [ "${{ inputs.environmentNamespace }}" == "true" ]; then
            INGRESS="${{ secrets.azureClusterName }}-${{ inputs.environment }}"
          else
            INGRESS="${{ secrets.azureClusterName }}"
          fi
          AKS_INGRESS="${INGRESS}-ingress.centralus.cloudapp.azure.com."
          echo "aksIngress=${AKS_INGRESS}" >> $GITHUB_OUTPUT
          INGRESSES=("${{ steps.values-override.outputs.domains }}")

          # Update DNS record
          for INGRESS in "${INGRESSES[@]}"; do
            echo "Updating DNS record for ${INGRESS} to $AKS_INGRESS"
            az network dns record-set cname set-record --resource-group "AMU_DNS_RG" --zone-name "${{ needs.build.outputs.domainName }}" --record-set-name "${INGRESS}" --cname "${AKS_INGRESS}" --ttl 3600
          done

      - name: Create Sentry release
        if: env.NEXT_PUBLIC_SENTRY_DSN && inputs.publishSentryRelease == 'true'
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.sentryAuthToken }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ github.event.repository.name }}
          SENTRY_URL: ${{ env.NEXT_PUBLIC_SENTRY_DSN }}
        with:
          environment: ${{ inputs.environment }}
          release: ${{ github.event.release.tag_name || github.sha }}

      - name: Get Current Date
        id: date
        run: |
          echo "date=$(date +'%m/%d/%YT%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name AzTable,Az.Storage,Az.Resources -Force

      - name: Record deployment information in Azure Storage Table
        shell: pwsh
        run: |
          $storageAccountName = "amucloudapps"
          $storageAccountKey = ${{ secrets.storageAccountKey }}
          $appInfoTableName = "DeployedApplications"
          $storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey

          #Get Storage table
          try {
              $appInfoTable = (Get-AzStorageTable -Name $appInfoTableName -Context $storageContext -ErrorAction Stop).CloudTable
              }
          catch {
              Write-Error -Message "Error accessing cloud $appInfoTableName table.  Error message was: $_.Exception.Message"
              return
          }

          Add-AzTableRow `
              -Table $appInfoTable `
              -partitionKey "${{ github.event.repository.name }}" `
              -RowKey "${{ inputs.environment }}" `
              -property @{
              "ApplicationName"="${{ needs.build.outputs.appName }}";
              "Version"="${{ needs.build.outputs.appVersion }}";
              "KeyVault"="${{ inputs.environmentKeyVault }}";
              "HostName"="${{ steps.values-override.outputs.dnsPrimaryDomain }}";
              "DomainName"="${{ needs.build.outputs.domainName }}";
              "IngressFqdn"="${{ needs.build.outputs.ingress }}";
              "AksIngress"="${{ steps.dns.outputs.aksIngress }}";
              "Cluster"="${{ secrets.azureClusterName }}";
              "ClusterResourceGroup"="${{ steps.aks-resource-group.outputs.AKS_RESOURCE_GROUP }}";
              "LastDeploy"="${{ steps.date.outputs.date }}"
              } -UpdateExisting | Out-Null

      - name: Create deployment summary
        run: |
          echo "### ${{ needs.build.outputs.appName }} Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Application Name**: ${{ needs.build.outputs.appName }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build.outputs.appVersion }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Key Vault Name**: ${{ inputs.environmentKeyVault }}" >> $GITHUB_STEP_SUMMARY
          echo "- **FQDN**: ${{ needs.build.outputs.ingress }}" >> $GITHUB_STEP_SUMMARY

      - name: Send Failed Deployment report to Teams
        if: failure() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Failed ${{ inputs.environment }} Deployment"
          notification-color: 17a2b8
          timezone: America/Chicago
          verbose-logging: true

      - name: Send Succeeded Deployment report to Teams
        if: success() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Successful ${{ inputs.environment }} Deployment"
          notification-color: 28a745
          timezone: America/Chicago
          verbose-logging: true