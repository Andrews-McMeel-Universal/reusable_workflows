on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Deploy Environment.  This is used to pull in and set the github environment. Can be development, staging, or production.'
      environmentKeyVault:
        required: true
        type: string
        description: 'AKS Key vault.'
      repositoryName:
        required: true
        type: string
        description: 'GitHub Repository Name.'
      clusterName:
        required: true
        type: string
        description: 'AKS Cluster name.'
      clusterResourceGroup:
        required: true
        type: string
        description: 'AKS Cluster Resource Group.'
      aksIngressFqdn:
        required: true
        type: string
        description: 'FQDN for AKS cluster ingress.'
      dnsResourceGroup:
        required: true
        type: string
        description: 'DNS Resource Group.'
      chartsPath:
        required: true
        type: string
        description: 'Relative path to Helm charts.'
      dockerFilePath:
        required: true
        type: string
        description: 'Relative path to Dockerfile.'
      dockerImageName:
        required: true
        type: string
        description: 'Docker image name.'
      dockerImageTag:
        required: true
        type: string
        description: 'Docker image tag.'
      maximumReplicas:
        required: false
        type: string
        description: 'Maximum number of replicas for the application HPA.'
        default: 4
      storageAccountName:
        required: true
        type: string
        description: 'Storage Account for application information table.'
      appInfoTableName:
        required: true
        type: string
        description: 'Application information storage table.'
      deploymentTimeout:
        required: false
        type: number
        description: 'Timeout for GitHub deployments'
        default: 20
      webAuthentication:
        required: false
        type: string
        description: 'Enable web authentication'
        default: false
      ingressWhitelist:
        required: false
        type: string
        description: 'IPs to include in the application whitelist'
        default: "0.0.0.0/0"
      adminIngressWhitelist:
        required: false
        type: string
        description: 'IPs to include in the Admin application whitelist'
        default: "207.67.20.252"
      environmentIngress:
        required: false
        type: string
        description: 'Add the environment name to the front of the hostname (for DNS)'
        default: true
    secrets:
      azureCredentials:
        required: true
      registryUserName:
        required: true
      registryPassword:
        required: true
      storageAccountKey:
        required: true
      webAuthenticationPassword:
        required: false
      webAuthenticationUsername:
        required: false

jobs:
  setup-environment:
    name: 'Prepare environment'
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout if Staging or Development deployment
        if: ${{ inputs.environment != 'production'}}
        uses: actions/checkout@v3.2.0

      - name: Get latest release if production deployment
        if: ${{ inputs.environment == 'production'}}
        id: getlatestrelease
        uses: thebritican/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Latest release if Production deployment
        if: ${{ inputs.environment == 'production'}}
        uses: actions/checkout@v3.2.0
        with: 
          ref: ${{ steps.getlatestrelease.outputs.tag_name }}

      - name: Checkout Code and Variables for the environment
        id: setenvs
        shell: pwsh
        run: |
          Function Get-Envs {
            param (
                [parameter(Mandatory = $true, ValueFromPipeline = $true)]
                [string]$PathToYaml
            )

              Install-Module -Name powershell-yaml -Confirm:$false -Force

              Import-Module powershell-yaml

              Write-Host "Getting configuration from: $PathToYaml."

              $Values = Get-Content $PathToYaml | ConvertFrom-Yaml

              return $Values
          }


          $appEnvironment= "${{ inputs.environment }}"
          $basePath = Get-Location
          $valuesYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "values.yaml"
          $appConfig = Get-Envs -PathToYaml $valuesYamlPath
          $chartYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "Chart.yaml"
          $chartConfig= Get-Envs -PathToYaml $chartYamlPath
          $containerRegistry = $appConfig.image.repository
          $appName = $chartConfig.name
          $appVersion = $chartConfig.appVersion
          $appHealthCheck = $appconfig.deployment.healthCheckPath
          $configMap = $appConfig.deployment.configMap
          $configSecret = $appConfig.deployment.secret
          $imagePullSecret = "$appName-pull-secret"
          $appDeployDate = Get-Date
          $ingress = $appConfig.ingress.host
          $domainName = ($ingress.Split('.') | Select-Object -Last 2) -join '.'
          $environmentIngress = "${{ inputs.environmentIngress }}"
          $hostName = $ingress -replace $domainName, ''
          $hostName = $hostName -replace "\.$", ""
          $ingressWhitelist = $($appConfig.ingress.annotations)."nginx.ingress.kubernetes.io/whitelist-source-range"
          $adminIngressWhitelist = $($appConfig.adminingress.annotations)."nginx.ingress.kubernetes.io/whitelist-source-range"

          if ($environmentIngress -eq "true") {
            $ingress = "$appEnvironment.$ingress"
            if ($hostName.Length -gt 0) {
              $hostName = "$appEnvironment.$hostName"
            }
            else {
              $hostName = "$appEnvironment"
            }
          }
          else {
            if ($hostName.Length -eq 0) {
              $hostName = "www"
            }
          }
          
          $release = "$appName-${{ github.sha }}".Substring(0,53)
          $release = ($release -replace '[^-\p{L}\p{Nd}]', '').ToLower() -replace '^-', '' -replace '-$', ''

          echo "appName=$appName" >> $env:GITHUB_ENV
          echo "appVersion=$appVersion" >> $env:GITHUB_ENV
          echo "appHealthCheck=$appHealthCheck" >> $env:GITHUB_ENV
          echo "configMap=$configMap" >> $env:GITHUB_ENV
          echo "configSecret=$configSecret" >> $env:GITHUB_ENV
          echo "ingress=$ingress" >> $env:GITHUB_ENV
          echo "domainName=$domainName" >> $env:GITHUB_ENV
          echo "hostName=$hostName" >> $env:GITHUB_ENV
          echo "imagePullSecret=$imagePullSecret" >> $env:GITHUB_ENV
          echo "containerRegistry=$containerRegistry" >> $env:GITHUB_ENV
          echo "date=$(date +'%m/%d/%YT%H:%M:%S')" >> $env:GITHUB_ENV
          echo "ingressWhitelist=$ingressWhitelist" >> $env:GITHUB_ENV
          echo "adminIngressWhitelist=$adminIngressWhitelist" >> $env:GITHUB_ENV

  build:
    name: 'Build Docker Image'
    runs-on: ubuntu-latest
    needs: [setup-environment]
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Login via Az module
        uses: azure/login@v1.4.7
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Get Secrets from Key Vaults
        id: getsecrets
        uses: azure/powershell@v1.2.0
        with:
          inlineScript: |
            Function Get-EnvSecrets {
              param (
                  $KeyVaultName
              )
                #$secretTable = @{}
                $envSecrets = (Get-AzKeyVaultSecret -VaultName $KeyVaultName  | Where-Object {($_.ContentType -contains 'Env') -or ($_.ContentType -contains 'BuildArg Env')}).Name
                $envSecrets | ForEach-Object {
                    $envName = $_.ToUpper()
                    $envName = $envName.Replace("-","_")
                    $envSecret = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $_).secretvalue | ConvertFrom-SecureString -AsPlainText
                    $envFileContent = $envName + "=" + $envSecret
                    Add-Content -Path ".env" -Value $envFileContent
                }
                return $kubernetesSecret
              }
            Function Get-BuildArgSecrets {
              param (
                  $KeyVaultName
              )
                $buildSecrets = (Get-AzKeyVaultSecret -VaultName $KeyVaultName  | Where-Object {($_.ContentType -contains 'BuildArg') -or ($_.ContentType -contains 'BuildArg Env')}).Name
                if ($buildSecrets.Count -gt 0) {
                    $buildArgPredicate = ' --build-arg '
                }
                else {
                    return
                }
                $buildSecrets | ForEach-Object {
                    $argName = $_.ToUpper()
                    $argName = $argName.Replace("-","_")
                    $argSecret = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $_).secretvalue | ConvertFrom-SecureString -AsPlainText
                    $buildArgs = $buildArgs + $buildArgPredicate + $argName + "=" + $argSecret
                }
                return $buildArgs
            }
            Get-EnvSecrets -KeyVaultName "${{ inputs.environmentKeyVault }}"
            Write-Host $k8sSecret
            $buildArguments = Get-BuildArgSecrets -KeyVaultName "${{ inputs.environmentKeyVault }}"

            echo "buildArguments=$buildArguments" >> $env:GITHUB_ENV
          azPSVersion: 'latest'

      - name: Login to Azure Container Registry
        uses: Azure/docker-login@v1.0.1
        with:
          login-server: ${{ env.containerRegistry }}
          username: ${{ secrets.registryUserName }}
          password: ${{ secrets.registryPassword }}

      - name: Set target AKS cluster
        uses: Azure/aks-set-context@v3.2
        with:
          cluster-name: ${{ inputs.clusterName }}
          resource-group: ${{ inputs.clusterResourceGroup }}

      - name: Switch to ${{ inputs.environment }} Namespace
        run: kubectl config set-context --current --namespace="${{ inputs.environment }}"

      - name: Apply configMap
        if: ${{ env.configMap != null }}
        uses: swdotcom/update-and-apply-kubernetes-configs@v1.2.0
        with:
          k8-config-file-paths: deployments/k8s/config-${{ inputs.environment }}.yaml

      - name: Add GitHub secrets to k8s
        shell: pwsh
        run: |
          if (kubectl get secret | Select-String "${{ env.configSecret }}") {
            kubectl delete secret "${{ env.configSecret }}"
          }
          kubectl create secret generic "${{ env.configSecret }}" --from-env-file .env

          if ( "${{ inputs.webAuthentication }}" -eq "true") {
            if (kubectl get secret | Select-String "${{ env.appName }}-basic-auth") {
              kubectl delete secret "${{ env.appName }}-basic-auth"
            }
            htpasswd -cb auth "${{ secrets.webAuthenticationUsername }}" "${{ secrets.webAuthenticationPassword }}"
            kubectl create secret generic "${{ env.appName }}-basic-auth" --from-file=auth
          }

      - name: Create k8s Image Pull Secret
        uses: Azure/k8s-create-secret@v4.0
        with:
          container-registry-url: "${{ env.containerRegistry }}"
          container-registry-username: ${{ secrets.registryUserName  }}
          container-registry-password: ${{ secrets.registryPassword  }}
          secret-name: "${{ env.imagePullSecret }}"

      - name: Build & Push Docker Image
        run: |
          docker build ${{ inputs.dockerFilePath }} ${{ env.buildArguments }} -t "${{ env.containerRegistry  }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}"
          docker push "${{ env.containerRegistry }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}"

  deploy:
    name: 'Deploy to AKS cluster'
    needs: [setup-environment,build]
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Create values override file
        run: |
          WEB_AUTHENTICATION="${{ inputs.webAuthentication }}"
          INGRESS_WHITELIST_ENV="${{ env.ingressWhitelist }}"
          ADMIN_INGRESS_WHITELIST_ENV="${{ env.adminIngressWhitelist }}"
          if [[ -n "${INGRESS_WHITELIST_ENV}" ]] ; then
            INGRESS_WHITELIST="${{ env.ingressWhitelist }}"
          else
            INGRESS_WHITELIST="${{ inputs.ingressWhitelist }}"
          fi

          if [[ -n "${ADMIN_INGRESS_WHITELIST_ENV}" ]] ; then
            ADMIN_INGRESS_WHITELIST="${{ env.adminIngressWhitelist }}"
          else
            ADMIN_INGRESS_WHITELIST="${{ inputs.adminIngressWhitelist }}"
          fi

          if [[ "${WEB_AUTHENTICATION}" == "true" ]] ; then
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
              nginx.ingress.kubernetes.io/auth-type: "basic"
              nginx.ingress.kubernetes.io/auth-secret: "${{ env.appName }}-basic-auth"
              nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
          adminingress:
            annotations:
              nginx.ingress.kubernetes.io/whitelist-source-range: "${ADMIN_INGRESS_WHITELIST}"
          EOF
          elif [[ "${ADMIN_INGRESS_WHITELIST}" != "207.67.20.252" ]] || [[ "${INGRESS_WHITELIST}" != "0.0.0.0/0" ]]; then
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
          adminingress:
            annotations:
              nginx.ingress.kubernetes.io/whitelist-source-range: "${ADMIN_INGRESS_WHITELIST}"
          EOF
          else
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
          EOF
          fi

      - name: Bake Helm Templates
        id: bake
        uses: azure/k8s-bake@v2.2
        with:
          renderEngine: 'helm'
          helmChart: ${{ inputs.chartsPath }}
          releaseName: ${{ env.release }}
          helm-version: 'latest'
          overrideFiles: ./values-override.yaml
          overrides: |
            image.repository:${{ env.containerRegistry }}/${{ inputs.dockerImageName }}
            image.tag:${{ inputs.dockerImageTag }}
            ingress.host:${{ env.ingress }}
            autoscaling.maxReplicas:${{ inputs.maximumReplicas }}

      - name: Deploy to Azure ${{ inputs.environment }}
        timeout-minutes: ${{ inputs.deploymentTimeout }}
        uses: Azure/k8s-deploy@v4.9
        with:
          namespace: ${{ inputs.environment }}
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            "${{ env.containerRegistry }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}"
          imagePullSecrets: |
            "${{ env.imagePullSecret }}"
          pull-images: false

  update-dns:
    name: 'Update DNS record'
    needs: [setup-environment,build,deploy]
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Create or Update Public DNS Record
        uses: azure/powershell@v1.2.0
        with:
          inlineScript: |
            $NewRecords = New-AzDnsRecordConfig -Cname ${{ inputs.aksIngressFqdn }};
            New-AzDnsRecordSet -Name "${{ env.hostName }}" -RecordType CNAME -ZoneName "${{ env.domainName }}" -ResourceGroupName ${{ inputs.dnsResourceGroup }} -Ttl 3600 -DnsRecords $NewRecords -Overwrite;
          azPSVersion: "latest"

  deployment-summary:
    name: 'Record deployment information'
    needs: [setup-environment,build,deploy,update-dns]
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ inputs.environment }}
    steps:
      - name: Record deployment information in Azure Storage Table ${{ inputs.appInfoTableName }}
        uses: LadyCailin/azure-table-storage-upload@v1.0.1
        with:
          table_name: "${{ inputs.appInfoTableName }}"
          partition_key: "${{ inputs.repositoryName }}"
          row_key: "${{ inputs.environment }}"
          data: "ApplicationName=${{ env.appName }} Version=${{ env.appVersion }} KeyVault=${{ inputs.environmentKeyVault }} HostName=${{ env.hostName }} DomainName=${{ env.domainName }} IngressFqdn=${{ env.ingress }} HealthCheckPath=${{ env.appHealthCheck }} AksIngress=${{ inputs.aksIngressFqdn }} Cluster=${{ inputs.clusterName }} ClusterResourceGroup=${{ inputs.clusterResourceGroup }} ConfigSecret=${{ env.configSecret }} ConfigMap=${{ env.configMap }} LastDeploy=${{ env.date }}"
          if_exists: 'replace'
          extra_args: ''
          connection_string: "AccountName=${{ inputs.storageAccountName }};AccountKey=${{ secrets.storageAccountKey }}"

      - name: Output summary
        run: |
          echo "### "${{ env.appName }}" Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- ApplicationName: "${{ env.appName }}"" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: "${{ inputs.environment }}"" >> $GITHUB_STEP_SUMMARY
          echo "- Version: "${{ env.appVersion }}"" >> $GITHUB_STEP_SUMMARY
          echo "- KeyVault: "${{ inputs.environmentKeyVault }}"" >> $GITHUB_STEP_SUMMARY
          echo "- HostName: "${{ env.hostName }}"" >> $GITHUB_STEP_SUMMARY
          echo "- DomainName: "${{ env.domainName }}"" >> $GITHUB_STEP_SUMMARY
          echo "- IngressFqdn: "${{ env.ingress }}"" >> $GITHUB_STEP_SUMMARY
          echo "- HealthCheckPath: "${{ env.appHealthCheck }}"" >> $GITHUB_STEP_SUMMARY
          echo "- AksIngress: "${{ inputs.aksIngressFqdn }}"" >> $GITHUB_STEP_SUMMARY
          echo "- Cluster: "${{ inputs.clusterName }}"" >> $GITHUB_STEP_SUMMARY
          echo "- ClusterResourceGroup: "${{ inputs.clusterResourceGroup }}"" >> $GITHUB_STEP_SUMMARY
          echo "- ConfigSecret: "${{ env.configSecret }}"" >> $GITHUB_STEP_SUMMARY
          echo "- ConfigMap: "${{ env.configMap }}"" >> $GITHUB_STEP_SUMMARY