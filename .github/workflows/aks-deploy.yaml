name: AKS Deployment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy Environment.  This is used to pull in and set the github environment. Can be development, staging, or production."
      environmentKeyVault:
        required: false
        type: string
        description: "AKS Key vault."
      repositoryName:
        required: false
        type: string
        description: "GitHub Repository Name."
        default: "${{ github.event.repository.name }}"
      clusterResourceGroup:
        required: false
        type: string
        description: "AKS Cluster Resource Group."
        default: "AMU_AKS_201"
      dnsResourceGroup:
        required: false
        type: string
        description: "DNS Resource Group."
        default: "AMU_DNS_RG"
      chartsPath:
        required: false
        type: string
        description: "Relative path to Helm charts."
        default: "./deployments/charts"
      dockerFilePath:
        required: false
        type: string
        description: "Relative path to Dockerfile."
        default: "."
      dockerImageName:
        required: false
        type: string
        description: "Docker image name."
        default: "${{ github.event.repository.name }}"
      dockerImageTag:
        required: false
        type: string
        description: "Docker image tag."
        default: "${{ github.event.release.tag_name || github.sha }}"
      maximumReplicas:
        required: false
        type: string
        description: "Maximum number of replicas for the application HPA."
        default: "30"
      storageAccountName:
        required: false
        type: string
        description: "Storage Account for application information table."
        default: "amucloudapps"
      appInfoTableName:
        required: false
        type: string
        description: "Application information storage table."
        default: "DeployedApplications"
      deploymentTimeout:
        required: false
        type: number
        description: "Timeout for GitHub deployments"
        default: 20
      webAuthentication:
        required: false
        type: string
        description: "Enable web authentication"
        default: "false"
      ingressWhitelist:
        required: false
        type: string
        description: "IPs to include in the application whitelist"
        default: "0.0.0.0/0"
      adminIngressWhitelist:
        required: false
        type: string
        description: "IPs to include in the Admin application whitelist"
        default: "207.67.20.252"
      environmentIngress:
        required: false
        type: string
        description: "Add the environment name to the front of the hostname (for DNS)"
        default: "true"
      environmentNamespace:
        required: false
        type: boolean
        description: "Enable/Disable adding environment in AKS cluster ingress DNS record"
        default: true
      enableNginxAccessLogging:
        required: false
        type: boolean
        description: Enable access logging in Kubernetes ingress
        default: false
    secrets:
      azureClusterName:
        required: true
      azureCredentials:
        required: true
      registryHostName:
        required: true
      registryUserName:
        required: true
      registryPassword:
        required: true
      storageAccountKey:
        required: true
      webAuthenticationPassword:
        required: false
      webAuthenticationUsername:
        required: false

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract Helm values
        id: setenvs
        shell: pwsh
        run: |
          Install-Module -Name powershell-yaml -Confirm:$false -Force
          Function Get-Envs {
              param (
                  [parameter(Mandatory = $true, ValueFromPipeline = $true)]
                  [string]$PathToYaml
              )
              Import-Module powershell-yaml
              Write-Host "Getting configuration from: $PathToYaml."
              $Values = Get-Content $PathToYaml | ConvertFrom-Yaml
              return $Values
          }

          $appEnvironment = "${{ inputs.environment }}"
          $basePath = Get-Location
          $valuesYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "values.yaml"
          $appConfig = Get-Envs -PathToYaml $valuesYamlPath
          $chartYamlPath = Join-Path $basePath ${{ inputs.chartsPath }} "Chart.yaml"
          $chartConfig = Get-Envs -PathToYaml $chartYamlPath

          $appName = $chartConfig.name
          $appVersion = $chartConfig.appVersion
          $appHealthCheck = $appconfig.deployment.healthCheckPath
          $configMap = $appConfig.deployment.configMap
          $configSecret = $appConfig.deployment.secret
          $imagePullSecret = "$appName-pull-secret"
          $release = "$appName-${{ github.sha }}" -replace '(^.{53})(.*$)', '$1'
          $release = ($release -replace '[^-\p{L}\p{Nd}]', '').ToLower() -replace '^-', '' -replace '-$', ''
          $ingress = $appConfig.ingress.host
          $domainName = ($ingress.Split('.') | Select-Object -Last 2) -join '.'
          $environmentIngress = "${{ inputs.environmentIngress }}" -replace '"', '' -replace "'", ""
          $hostName = $ingress -replace $domainName, '' -replace "\.$", ""
          $ingressWhitelist = $appConfig.ingress.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" ?? "${{ inputs.ingressWhitelist }}"
          if ($appConfig.adminingress) {
              $adminIngressWhitelist = $appConfig.adminingress.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" ?? "${{ inputs.adminIngressWhitelist }}"
              if (![bool]($adminIngressWhitelist -match "^\d{1,3}(\.\d{1,3}){3}(\/\d{1,2})?(,\d{1,3}(\.\d{1,3}){3}(\/\d{1,2})?)*$")) { 
                  Write-Output "::warning file=$valuesYamlPath::Invalid value set for 'adminingress.annotations.nginx.ingress.kubernetes.io/whitelist-source-range'. Defaulting to ${{ inputs.adminIngressWhitelist }} Value: $adminIngressWhitelist"
                  $adminIngressWhitelist = "${{ inputs.adminIngressWhitelist }}"
              }
          }
          else {
              Write-Output "::notice file=$valuesYamlPath::adminingress values not defined. Skipping setting adminIngressWhitelist"
          }

          if ($environmentIngress -eq "true") {
              $ingress = "$appEnvironment.$ingress"
              if ($hostName.Length -gt 0) {
                  $hostName = "$appEnvironment.$hostName"
              }
              else {
                  $hostName = "$appEnvironment"
              }
          }
          else {
              if ($hostName.Length -eq 0) {
                  $hostName = "www"
              }
          }
          Write-Output "::notice file=$valuesYamlPath::This application's hostname is $hostName.$domainName"

          Write-Output "appName=$appName" >> $env:GITHUB_ENV
          Write-Output "appVersion=$appVersion" >> $env:GITHUB_ENV
          Write-Output "appHealthCheck=$appHealthCheck" >> $env:GITHUB_ENV
          Write-Output "configMap=$configMap" >> $env:GITHUB_ENV
          Write-Output "configSecret=$configSecret" >> $env:GITHUB_ENV
          Write-Output "ingress=$ingress" >> $env:GITHUB_ENV
          Write-Output "domainName=$domainName" >> $env:GITHUB_ENV
          Write-Output "hostName=$hostName" >> $env:GITHUB_ENV
          Write-Output "imagePullSecret=$imagePullSecret" >> $env:GITHUB_ENV
          Write-Output "date=$(date +'%m/%d/%YT%H:%M:%S')" >> $env:GITHUB_ENV
          Write-Output "ingressWhitelist=$ingressWhitelist" >> $env:GITHUB_ENV
          Write-Output "adminIngressWhitelist=$adminIngressWhitelist" >> $env:GITHUB_ENV
          Write-Output "release=$release" >> $env:GITHUB_ENV

      - name: Generate .env file from Azure Key Vaults
        id: get-envs
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.azureCredentials }}
          environment: ${{ inputs.environment }}
          environmentKeyVault: ${{ inputs.environmentKeyVault }}
          contentTypes: BuildArg Env

      - name: Login to Azure Container Registry
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ secrets.registryHostName }}
          username: ${{ secrets.registryUserName }}
          password: ${{ secrets.registryPassword }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Build & Push Docker Image
        run: |
          docker buildx build ${{ steps.get-envs.outputs.buildArguments }} -t "${{ secrets.registryHostName }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}" ${{ inputs.dockerFilePath }} --load
          if [[ "${{ inputs.environment }}" == "production" ]] ; then
            docker tag "${{ secrets.registryHostName }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}" "${{ secrets.registryHostName }}/${{ inputs.dockerImageName }}:latest"
          fi
          if [[ "${{ inputs.dockerImageTag }}" == "${{ github.event.release.tag_name }}" ]]; then
            MAJOR_RELEASE=$(echo "${{ github.event.release.tag_name }}" | cut -d "." -f 1)
            docker tag "${{ secrets.registryHostName }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}" "${{ secrets.registryHostName }}/${{ inputs.dockerImageName }}:${MAJOR_RELEASE}"
          fi
          docker push -a "${{ secrets.registryHostName }}/${{ inputs.dockerImageName }}"

      - name: Create values override file
        run: |
          WEB_AUTHENTICATION=$(echo "${{ inputs.webAuthentication }}" | tr -d "'" | tr -d '"')
          INGRESS_WHITELIST="${{ env.ingressWhitelist }}"
          ADMIN_INGRESS_WHITELIST="${{ env.adminIngressWhitelist }}"
          echo "::debug::WEB_AUTHENTICATION=$WEB_AUTHENTICATION"
          echo "::debug::INGRESS_WHITELIST=$INGRESS_WHITELIST"
          echo "::debug::ADMIN_INGRESS_WHITELIST=$ADMIN_INGRESS_WHITELIST"

          if [[ "${WEB_AUTHENTICATION}" == "true" ]] ; then
            if [[ -n "${ADMIN_INGRESS_WHITELIST}" ]] ; then
              echo "::debug::WEB_AUTHENTICATION=true,ADMIN_INGRESS_WHITELIST!=null"
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
              nginx.ingress.kubernetes.io/auth-type: "basic"
              nginx.ingress.kubernetes.io/auth-secret: "${{ env.appName }}-basic-auth"
              nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
          adminingress:
            annotations:
              nginx.ingress.kubernetes.io/whitelist-source-range: "${ADMIN_INGRESS_WHITELIST}"
          EOF
            else
              echo "::debug::WEB_AUTHENTICATION=true,ADMIN_INGRESS_WHITELIST=null"
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
              nginx.ingress.kubernetes.io/auth-type: "basic"
              nginx.ingress.kubernetes.io/auth-secret: "${{ env.appName }}-basic-auth"
              nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
          EOF
            fi
          elif [[ -n "${ADMIN_INGRESS_WHITELIST}" ]] ; then
            echo "::debug::WEB_AUTHENTICATION=false,ADMIN_INGRESS_WHITELIST!=null"
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
          adminingress:
            annotations:
              nginx.ingress.kubernetes.io/whitelist-source-range: "${ADMIN_INGRESS_WHITELIST}"
          EOF
          else
            echo "::debug::WEB_AUTHENTICATION=false,ADMIN_INGRESS_WHITELIST=null"
          cat << EOF >> values-override.yaml
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/limit-whitelist: "207.67.20.252"
              nginx.ingress.kubernetes.io/whitelist-source-range: "${INGRESS_WHITELIST}"
          EOF
          fi

      - name: Bake Helm Templates
        id: bake
        uses: azure/k8s-bake@v2
        with:
          renderEngine: "helm"
          helmChart: ${{ inputs.chartsPath }}
          releaseName: ${{ env.release }}
          helm-version: "latest"
          overrideFiles: ./values-override.yaml
          overrides: |
            image.repository:${{ secrets.registryHostName }}/${{ inputs.dockerImageName }}
            image.tag:${{ inputs.dockerImageTag }}
            ingress.host:${{ env.ingress }}
            autoscaling.maxReplicas:${{ inputs.maximumReplicas }}
            ingress.annotations.nginx\.ingress\.kubernetes\.io/enable-access-log:"false"

      - name: Upload bake-manifests-bundle artifact
        uses: actions/upload-artifact@v3
        with:
          name: bake-manifests-bundle
          path: ${{ steps.bake.outputs.manifestsBundle }}
          retention-days: 1

    outputs:
      manifestsBundle: ${{ steps.bake.outputs.manifestsBundle }}
      appName: ${{ env.appName }}
      appVersion: ${{ env.appVersion }}
      appHealthCheck: ${{ env.appHealthCheck }}
      configMap: ${{ env.configMap }}
      configSecret: ${{ env.configSecret }}
      ingress: ${{ env.ingress }}
      domainName: ${{ env.domainName }}
      hostName: ${{ env.hostName }}
      imagePullSecret: ${{ env.imagePullSecret }}
      date: ${{ env.date }}
      ingressWhitelist: ${{ env.ingressWhitelist }}
      adminIngressWhitelist: ${{ env.adminIngressWhitelist }}
      release: ${{ env.release }}

  deploy:
    name: AKS Deploy
    needs: [build]
    runs-on: ubuntu-latest
    continue-on-error: false
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ needs.build.outputs.ingress }}
    steps:
      - name: Download bake-manifests-bundle artifact
        uses: actions/download-artifact@v3
        with:
          name: bake-manifests-bundle
          path: ${{ needs.build.outputs.manifestsBundle }}

      - name: Generate .env file from Azure Key Vaults
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.azureCredentials }}
          environment: ${{ inputs.environment }}
          environmentKeyVault: ${{ inputs.environmentKeyVault }}

      - name: Set target AKS cluster
        uses: Azure/aks-set-context@v3.2
        with:
          cluster-name: ${{ secrets.azureClusterName }}
          resource-group: ${{ inputs.clusterResourceGroup }}

      - name: Switch Kubernetes Namespace
        id: namespace
        run: |
          if [ "${{ inputs.environmentNamespace }}" == "true" ]; then
            kubectl config set-context --current --namespace="${{ inputs.environment }}"
            echo "namespace=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "namespace=default" >> $GITHUB_OUTPUT
          fi

      - name: Apply configMap if it exists
        if: ${{ needs.build.outputs.configMap != null }}
        uses: swdotcom/update-and-apply-kubernetes-configs@v1
        with:
          k8-config-file-paths: deployments/k8s/config-${{ inputs.environment }}.yaml

      - name: Add GitHub secrets to k8s
        shell: pwsh
        run: |
          if (kubectl get secret | Select-String "${{ needs.build.outputs.configSecret }}") {
              kubectl delete secret "${{ needs.build.outputs.configSecret }}"
          }
          kubectl create secret generic "${{ needs.build.outputs.configSecret }}" --from-env-file .env

          if ( "${{ inputs.webAuthentication }}" -eq "true") {
              if (!"${{ secrets.webAuthenticationUsername }}" -or !"${{ secrets.webAuthenticationPassword }}") {
                  Write-Output "::error::Please make sure the 'webAuthenticationUsername' and 'webAuthenticationPassword' GitHub environment secrets are set correctly."
                  exit 1
              }

              if (kubectl get secret | Select-String "${{ needs.build.outputs.appName }}-basic-auth") {
                  kubectl delete secret "${{ needs.build.outputs.appName }}-basic-auth"
              }
              htpasswd -cb auth "${{ secrets.webAuthenticationUsername }}" "${{ secrets.webAuthenticationPassword }}"
              kubectl create secret generic "${{ needs.build.outputs.appName }}-basic-auth" --from-file=auth
          }

      - name: Create K8s Image Pull Secret
        uses: Azure/k8s-create-secret@v4
        with:
          container-registry-url: ${{ secrets.registryHostName }}
          container-registry-username: ${{ secrets.registryUserName  }}
          container-registry-password: ${{ secrets.registryPassword  }}
          secret-name: "${{ needs.build.outputs.imagePullSecret }}"

      - name: Deploy to Azure Kubernetes Service
        timeout-minutes: ${{ inputs.deploymentTimeout }}
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ${{ steps.namespace.outputs.namespace }}
          manifests: ${{ needs.build.outputs.manifestsBundle }}
          images: |
            "${{ secrets.registryHostName }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}"
          imagepullsecrets: |
            "${{ needs.build.outputs.imagePullSecret }}"
          pull-images: false

  update-records:
    name: Update deployment records
    needs: [build, deploy]
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: "${{ secrets.azureCredentials }}"

      - name: Create or Update Public DNS Record
        id: dns
        run: |
          if [ "${{ inputs.environmentNamespace }}" == "true" ]; then
            INGRESS="${{ secrets.azureClusterName }}-${{ inputs.environment }}"
          else
            INGRESS="${{ secrets.azureClusterName }}"
          fi
          AKS_INGRESS="${INGRESS}-ingress.centralus.cloudapp.azure.com."
          az network dns record-set cname set-record --resource-group "${{ inputs.dnsResourceGroup }}" --zone-name "${{ needs.build.outputs.domainName }}" --record-set-name "${{ needs.build.outputs.hostName }}" --cname "${AKS_INGRESS}" --ttl 3600

          echo "aksIngress=${AKS_INGRESS}" >> $GITHUB_OUTPUT

      - name: Record deployment information in Azure Storage Table
        uses: LadyCailin/azure-table-storage-upload@v1.0.1
        with:
          table_name: "${{ inputs.appInfoTableName }}"
          partition_key: "${{ inputs.repositoryName }}"
          row_key: "${{ inputs.environment }}"
          data: "ApplicationName=${{ needs.build.outputs.appName }} Version=${{ needs.build.outputs.appVersion }} KeyVault=${{ inputs.environmentKeyVault }} HostName=${{ needs.build.outputs.hostName }} DomainName=${{ needs.build.outputs.domainName }} IngressFqdn=${{ needs.build.outputs.ingress }} HealthCheckPath=${{ needs.build.outputs.appHealthCheck }} AksIngress=${{ steps.dns.outputs.aksIngress }} Cluster=${{ secrets.azureClusterName }} ClusterResourceGroup=${{ inputs.clusterResourceGroup }} ConfigSecret=${{needs.build.outputs.configSecret }} ConfigMap=${{ needs.build.outputs.configMap }} LastDeploy=${{ needs.build.outputs.date }}"
          if_exists: "replace"
          extra_args: ""
          connection_string: "AccountName=${{ inputs.storageAccountName }};AccountKey=${{ secrets.storageAccountKey }}"

      - name: Create deployment summary
        run: |
          echo "### ${{ needs.build.outputs.appName }} Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Application Name**: ${{ needs.build.outputs.appName }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build.outputs.appVersion }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Key Vault Name**: ${{ inputs.environmentKeyVault }}" >> $GITHUB_STEP_SUMMARY
          echo "- **FQDN**: ${{ needs.build.outputs.ingress }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: ${{ secrets.azureClusterName }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ConfigSecret**: ${{ needs.build.outputs.configSecret }}" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ needs.build.outputs.configMap }}" ]] ; then
            echo "- **ConfigMap**: ${{ needs.build.outputs.configMap }}" >> $GITHUB_STEP_SUMMARY
          fi
