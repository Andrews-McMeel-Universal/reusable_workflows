on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      aksIngressFqdn:
        required: true
        type: string
        description: "FQDN for AKS cluster ingress."
      dockerBuildArguments:
        required: false
        type: string
        description: "Optional Docker Build Arguments."
      chartsPath:
        required: true
        type: string
        description: "Relative path to Helm charts."
      dockerImageName:
        required: true
        type: string
        description: "Name for docker image."
      dockerImageTag:
        required: true
        type: string
        description: "Name for docker image tag."
      dockerFilePath:
        required: true
        type: string
        description: "Relative path to Dockerfile."
      maximumReplicas:
        required: false
        type: string
        description: "Maximum number of replicas for the application HPA."
        default: 4
    secrets:
      azureCredentials:
        required: true
      registryUserName:
        required: true
      registryPassword:
        required: true
         
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - id: getlatestrelease
        uses: thebritican/fetch-latest-release@v1.0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout if Staging or Development deployment.
        if: ${{ inputs.environment != 'production'}}
        uses: actions/checkout@master

      - name: Checkout Latest release if Production deployment.
        if: ${{ inputs.environment == 'production'}}
        uses: actions/checkout@v2
        with: 
          ref: ${{ steps.getlatestrelease.outputs.tag_name }}

      - name: Get Env
        id: getenvs
        shell: pwsh
        run: |
          function Get-Envs {
            param (
                  [parameter(Mandatory = $true, ValueFromPipeline = $true)]
                  [string]$PathToYaml
                  )

                  #Check to see if powershell-yaml is installed 
                  if (Get-Module -Name powershell-yaml) {
                    #It's installed, this would be if you are running locally. 
                  }
                  else {
                      Write-Host "Installing Powershell-Yaml."
                      Install-Module -Name powershell-yaml -Confirm:$false -Force
                  }

                  Import-Module powershell-yaml

                  Write-Host "Getting configuration from: $PathToYaml."

                  $Values = Get-Content $PathToYaml | ConvertFrom-Yaml

                  return $Values
          }

          $AppEnv = "${{ env.application_environment }}"
          $BasePath = Get-Location
          $YamlPath = Join-Path $BasePath ${{ env.chartsPath }} "values.yaml"
          $AppConfig = ./deployments/scripts/Get-Envs.ps1 -PathToYaml $YamlPath
          $YamlPath = Join-Path $BasePath ${{ env.chartsPath }} "Chart.yaml"
          $ChartConfig = ./deployments/scripts/Get-Envs.ps1 -PathToYaml $YamlPath
          $KubernetesSecret = $AppConfig.githubActions.kubernetesSecret
          $ClusterName = $AppConfig.githubActions.clusterName
          $ClusterResourceGroup = $AppConfig.githubActions.clusterResourceGroup
          $ContainerRegistry = $AppConfig.githubActions.containerRegistry
          $EnvironmentSecrets = $AppConfig.githubActions.environmentSecrets
          $ApiSubscriptionRequired = $AppConfig.githubActions.apiSubscriptionRequired
          $ApiSpecPath = $AppConfig.githubActions.apiSpecPath
          $ApiId = $AppConfig.githubActions.apiId
          $ApiProductId = $AppConfig.githubActions.apiProductId
          $AppName = $ChartConfig.name
          $ConfigMap = $AppConfig.deployment.configMap
          $ConfigSecret = $AppConfig.deployment.secret
          $Ingress = $AppConfig.ingress.host
          $DomainName = ($Ingress.Split('.') | Select-Object -Last 2) -join '.'
          $HostName = $Ingress -replace $DomainName, ''
          $HostName = $HostName.Substring(0,$HostName.Length-1)
          switch ($AppEnv) {
            'development' {$HostName = "development.$Hostname"; $Ingress = "development.$Ingress"}
            'staging' {$HostName = "staging.$Hostname"; $Ingress = "staging.$Ingress"}
          }
          $ImagePullSecret = "$AppName-pull-secret"
          echo "::set-output name=APPNAME::$AppName"
          echo "::set-output name=CONFIGMAP::$ConfigMap"
          echo "::set-output name=CONFIGSECRET::$ConfigSecret"
          echo "::set-output name=INGRESS::$Ingress"
          echo "::set-output name=DOMAINNAME::$DomainName"
          echo "::set-output name=HOSTNAME::$HostName"
          echo "::set-output name=IMAGEPULLSECRET::$ImagePullSecret"
          echo "::set-output name=CLUSTERNAME::$ClusterName"
          echo "::set-output name=CLUSTERRESOURCEGROUP::$ClusterResourceGroup"
          echo "::set-output name=CONTAINERREGISTRY::$ContainerRegistry"
          echo "::set-output name=ENVIRONMENTSECRETS::$EnvironmentSecrets"
          echo "::set-output name=KUBERNETESSECRET::$KubernetesSecret"
          echo "::set-output name=APISUBSCRIPTIONREQUIRED::$ApiSubscriptionRequired"
          echo "::set-output name=APISPECPATH::$ApiSpecPath"
          echo "::set-output name=APIID::$ApiId"
          echo "::set-output name=APIPRODUCTID::$ApiProductId"
          
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: '${{ secrets.azureCredentials }}'
          enable-AzPSSession: true

      - name: Get Environment Key vault Secrets
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ env.environment_key_vault }}
          secrets: ${{ steps.getenvs.outputs.ENVIRONMENTSECRETS }}
        id: environment-secrets

      - name: Login to Azure Container Registry
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ steps.getenvs.outputs.CONTAINERREGISTRY }}
          username: ${{ secrets.registryUserName }}
          password: ${{ secrets.registryPassword }}
      
      - name: Set target AKS cluster
        uses: Azure/aks-set-context@v1
        with:
          creds: '${{ secrets.azureCredentials }}'
          cluster-name: ${{ steps.getenvs.outputs.CLUSTERNAME }}
          resource-group: ${{ steps.getenvs.outputs.CLUSTERRESOURCEGROUP  }}

      - name: Switch to ${{ inputs.environment }} Namespace
        run: kubectl config set-context --current --namespace=${{ inputs.environment }}
      
      - name: Apply ConfigMap
        if: ${{ steps.getenvs.outputs.CONFIGMAP != null }}
        uses: swdotcom/update-and-apply-kubernetes-configs@v1
        with:
          k8-config-file-paths: deployments/k8s/config-${{ inputs.environment }}.yaml
      
      - name: Add GitHub secrets to k8s
        if: ${{ steps.getenvs.outputs.CONFIGSECRET != null }}
        uses: Azure/k8s-create-secret@v1
        with:
          namespace: ${{ inputs.environment }}
          secret-type: 'generic'
          arguments: ${{ steps.getenvs.outputs.KUBERNETESSECRET}}
          secret-name: ${{ steps.getenvs.outputs.CONFIGSECRET }}

      - name: Create or Update Public DNS Record
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $NewRecords = New-AzDnsRecordConfig -Cname ${{ inputs.aksIngressFqdn }};
            New-AzDnsRecordSet -Name "${{ steps.getenvs.outputs.HOSTNAME  }}" -RecordType CNAME -ZoneName ${{ steps.getenvs.outputs.DOMAINNAME  }} -ResourceGroupName ${{ inputs.dns_rg }} -Ttl 3600 -DnsRecords $NewRecords -Overwrite;
          azPSVersion: '3.1.0'

      - name: Create k8s Image Pull Secret
        uses: Azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ steps.getenvs.outputs.CONTAINERREGISTRY }}
          container-registry-username: ${{ secrets.registryUserName }}
          container-registry-password: ${{ secrets.registryPassword }}
          secret-name: ${{ steps.getenvs.outputs.IMAGEPULLSECRET }}

      - name: Build & Push Docker Image - No Build Arguments
        if: ${{ inputs.dockerBuildArguments = null }}
        run: |
          docker build ${{ inputs.dockerFilePath }}  -t ${{ steps.getenvs.outputs.CONTAINERREGISTRY }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}
          docker push ${{ steps.getenvs.outputs.CONTAINERREGISTRY }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}
      
      - name: Build & Push Docker Image - With Build Arguments
        if: ${{ inputs.dockerBuildArguments != null }}
        run: |
          docker build ${{ inputs.dockerFilePath }} --build-arg ${{ inputs.dockerBuildArguments }}  -t ${{ steps.getenvs.outputs.CONTAINERREGISTRY }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}
          docker push ${{ steps.getenvs.outputs.CONTAINERREGISTRY }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}
      
      - name: Create valid release-name
        id: generate-release-name
        run: |
          release=${{ inputs.dockerImageName }}-${{ inputs.dockerImageTag }}
          release=${release::53}
          release=$(echo ${release//[!0-9a-zA-Z]/-} | tr '[:upper:]' '[:lower:]' | sed -e 's/^-/z/' -e 's/-$/z/')
          echo ::set-output name=result::$release

      - name: Bake Helm templates for Staging and Development
        if: ${{ inputs.environment != 'production'}}
        uses: azure/k8s-bake@v1
        with:
          renderEngine: 'helm'
          helmChart: ${{ inputs.chartsPath }}
          releaseName: ${{steps.generate-release-name.outputs.result}}
          helm-version: 'latest'
          overrides: |
            image.repository:${{ steps.getenvs.outputs.CONTAINERREGISTRY }}/${{ inputs.dockerImageName }}
            image.tag:${{ inputs.dockerImageTag }}
            ingress.host:${{ steps.getenvs.outputs.APPINGRESS }}
            autoscaling.maxReplicas:${{ inputs.maximumReplicas }}
        id: bake

      - name: Bake Helm templates for Production
        if: ${{ inputs.environment = 'production'}}
        uses: azure/k8s-bake@v1
        with:
          renderEngine: 'helm'
          helmChart: ${{ inputs.chartsPath }}
          releaseName: ${{steps.generate-release-name.outputs.result}}
          helm-version: 'latest'
          overrides: |
            image.repository:${{ steps.getenvs.outputs.CONTAINERREGISTRY }}/${{ inputs.dockerImageName }}
            image.tag:${{ inputs.dockerImageTag }}
            ingress.host:${{ steps.getenvs.outputs.APPINGRESS }}
        id: bake

    
      - name: Deploy to Azure
        uses: Azure/k8s-deploy@v1
        with:
          namespace: ${{ steps.getenvs.outputs.AKSNAMESPACE }}
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            ${{ steps.getenvs.outputs.CONTAINERREGISTRY }}/${{ inputs.dockerImageName }}:${{ inputs.dockerImageTag }}
          imagepullsecrets: |
            ${{ steps.getenvs.outputs.IMAGEPULLSECRET }}

    outputs:
      aksIngressFqdn: ${{ inputs.aksIngressFqdn }}
      domainName: ${{ steps.getenvs.outputs.DOMAINNAME }}
      environment: ${{ inputs.environment }}
      hostName: ${{ steps.getenvs.outputs.HOSTNAME }}
      ingressFqdn: ${{ steps.getenvs.outputs.APPINGRESS }}
      

