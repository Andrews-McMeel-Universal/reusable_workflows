name: Docker Application CI

on:
  workflow_call:
    inputs:
      environment:
        required: false
        description: Environment to run CI checks in
        type: string
        default: development
      healthCheckPath:
        required: false
        description: Path to health check endpoint
        type: string
        default: ${{ vars.APPLICATION_CI_HEALTHCHECK_PATH || '/' }}
      ENV_ENCRYPTION_SECRET:
        required: false
        type: string
        default: ${{ vars.ENV_ENCRYPTION_SECRET }}
      GITHUB_RUNNER:
        required: false
        type: string
        description: "The type of runner to use"
        default: ${{ vars.CUSTOM_GITHUB_RUNNER || 'azure' }}
    secrets:
      azureCredentials:
        required: false

jobs:
  build:
    name: Build app
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ${{ inputs.GITHUB_RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if azureCredentials is set
        run: |
          if [ -z "${{ secrets.azureCredentials }}" ]; then
            echo "Azure Credentials not set. Skipping Azure Key Vault retrieval."
            echo "AZURE_CREDENTIALS_SET=false" >> $GITHUB_ENV
          fi

      - name: Prepare environment encryption key
        id: env-enc-key
        run: |
          ENV_ENCRYPTION_SECRET="$(jq -r '.inputs.ENV_ENCRYPTION_SECRET' $GITHUB_EVENT_PATH | base64 --decode 2>/dev/null)"
          echo "::add-mask::${ENV_ENCRYPTION_SECRET}"
          echo "envEncryptionSecret=${ENV_ENCRYPTION_SECRET}" >> $GITHUB_OUTPUT

      - name: Generate .env file from Azure Key Vaults
        if: ${{ env.AZURE_CREDENTIALS_SET != 'false' }}
        id: get-envs
        uses: Andrews-McMeel-Universal/get-envs@v1
        with:
          azurecredentials: ${{ secrets.azureCredentials }}
          environment: ${{ inputs.environment }}
          contentTypes: BuildArg Env
          buildArgPredicate: ";"
          enableCaching: true
          envEncryptionSecret: ${{ steps.env-enc-key.outputs.envEncryptionSecret }}
      
      - name: Insert new line after build arguments
        id: insert-new-line
        run: |
          buildArguments=$(echo "${{ steps.get-envs.outputs.buildArguments }}" | sed 's/^ ; //g' | sed 's/; /\n/g')
          echo 'buildArguments<<EOF' >> $GITHUB_ENV
          echo "$buildArguments" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Docker Build
        uses: docker/build-push-action@v5
        with:
          tags: docker-ci:latest
          push: false
          load: true
          build-args: |
            ${{ env.buildArguments }}

      - name: Get Docker variables from image
        run: |
          dockerContainerPort=$(docker image inspect docker-ci:latest -f "{{json .Config.ExposedPorts }}" | tr -d '{}":/tcp')
          dockerCmd=$(docker image inspect docker-ci:latest -f "{{json .Config.Cmd }}" | tr -d '][' | tr "," " ")

          echo "dockerContainerPort=$dockerContainerPort" >> $GITHUB_ENV
          echo "dockerCmd=$dockerCmd" >> $GITHUB_ENV

      - name: Run tests in Docker Container
        uses: addnab/docker-run-action@v3
        with:
          image: docker-ci:latest
          run: |
            ${{ env.dockerCmd }} &
            sleep 15
            RESULT=$?
            if [ $RESULT -eq 0 ]; then
              wget -O - -q "http://localhost:${{ env.dockerContainerPort }}${{ inputs.healthCheckPath }}" ||
              curl "http://localhost:${{ env.dockerContainerPort }}${{ inputs.healthCheckPath }}"
            else
              exit 1
            fi
