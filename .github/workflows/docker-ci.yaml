name: Docker Application CI

on:
  workflow_call:
    inputs:
      environment:
        required: false
        description: Environment to run CI checks in
        type: string
        default: development
    secrets:
      azureCredentials:
        required: false

jobs:
  build:
    name: Build app
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if azureCredentials is set
        run: |
          if [ -z "${{ secrets.azureCredentials }}" ]; then
            echo "Azure Credentials not set. Skipping Azure Key Vault retrieval."
            echo "AZURE_CREDENTIALS_SET=false" >> $GITHUB_ENV
          fi

      - name: Generate .env file from Azure Key Vaults
        if: ${{ env.AZURE_CREDENTIALS_SET != 'false' }}
        id: get-envs
        uses: Andrews-McMeel-Universal/get-envs@maint/UEXPRESS-1171/add-docker-ci-check
        with:
          azurecredentials: ${{ secrets.azureCredentials }}
          environment: ${{ inputs.environment }}
          contentTypes: BuildArg Env
          buildArgPredicate: ";"
      
      - name: Insert new line after build arguments
        id: insert-new-line
        run: |
          buildArguments=$(echo "${{ steps.get-envs.outputs.buildArguments }}" | sed 's/^ ; //g' | sed 's/; /\n/g')
          echo "buildArguments=${buildArguments}" >> $GITHUB_OUTPUT

      - name: Docker Build
        uses: docker/build-push-action@v5
        with:
          tags: docker-ci:latest
          push: false
          load: true
          build-args: ${{ steps.insert-new-line.outputs.buildArguments }}

      - name: Get Docker variables from image
        run: |
          dockerContainerPort=$(docker image inspect docker-ci:latest -f "{{json .Config.ExposedPorts }}" | tr -d '{}":/tcp')
          dockerCmd=$(docker image inspect docker-ci:latest -f "{{json .Config.Cmd }}" | tr -d '][' | tr "," " ")

          echo "dockerContainerPort=$dockerContainerPort" >> $GITHUB_ENV
          echo "dockerCmd=$dockerCmd" >> $GITHUB_ENV

      - name: Run tests in Docker Container
        uses: addnab/docker-run-action@v3
        with:
          image: docker-ci:latest
          run: |
            ${{ env.dockerCmd }} &
            sleep 15
            RESULT=$?
            if [ $RESULT -eq 0 ]; then
              wget -O - -q "http://localhost:${{ env.dockerContainerPort }}" ||
              curl "http://localhost:${{ env.dockerContainerPort }}"
            else
              exit 1
            fi
