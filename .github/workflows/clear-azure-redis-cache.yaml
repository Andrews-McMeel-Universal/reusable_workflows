name: Clear Azure Redis Cache

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment to clear caches for."
      resourceGroupName:
        default: "AMU_DevOps_RG"
        type: string
        description: "Name of Resource Group that the Azure Redis Instance is in."
      applicationCacheKey:
        default: ${{ vars.REDIS_CACHE_KEY || '*' }}
        type: string
        description: "Cache key for the application"
    secrets:
      azureCredentials:
       required: true

jobs:
  clear-redis-cache:
    name: Clear Azure Redis Cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login via Az module
        uses: azure/login@v2
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Install redis-tools apt package
        run: sudo apt-get update -y && sudo apt-get install redis-tools -y

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name Az.RedisCache -Force

      # Script is adapted from https://github.com/Andrews-McMeel-Universal/azure-content-management_tool/blob/main/Scripts/rundeck/Flush-RedisCache.ps1
      - name: Clear Redis Cache
        shell: pwsh
        run: |
          $CacheKeys = "${{ inputs.applicationCacheKey }}"
          $ResourceGroupName = "${{ inputs.resourceGroupName }}"
          $Environment = "${{ inputs.environment }}"

          # Get list of Redis instances using tags
          $Redis = Get-AzRedisCache -ResourceGroupName "$ResourceGroupName" | Where-Object { $_.Tag.Values -eq "$Environment" }

          # Loop through Redis instances
          $Redis | ForEach-Object {
              $RedisHostname = $_.HostName
              $RedisPort = $_.Port
              $RedisName = $_.Name
              $RedisKey = (Get-AzRedisCacheKey -Name $RedisName -ResourceGroupName $ResourceGroupName).PrimaryKey

              Write-Host "Authenticating to $RedisHostname..." -ForegroundColor DarkGray

              # Loop through cache keys
              foreach ($Key in $CacheKeys.Split(',')) {
                  if ([string]::IsNullOrWhiteSpace($Key)) { continue }

                  # Create a temporary Lua script file
                  $TempScriptPath = [System.IO.Path]::GetTempFileName() + ".lua"
                  Set-Content -Path $TempScriptPath -Value @"
              AUTH $RedisKey
              local cursor = '0'
              repeat
                  local result = redis.call('SCAN', cursor, 'MATCH', ARGV[1], 'COUNT', 1000)
                  cursor = result[1]
                  local keys = result[2]
                  if #keys > 0 then
                      redis.call('DEL', unpack(keys))
                  end
              until cursor == '0'
              return 'OK'
          "@

                  Write-Host "Clearing cache key: $Key" -ForegroundColor DarkGray
                  $RedisResult = redis-cli -h $RedisHostname -p $RedisPort --eval $TempScriptPath , $Key

                  # Check if output from cache clearing command has correct status message
                  if ($RedisResult -match '^OK$') {
                      Write-Host "Successfully flushed '$Key' cache key for $RedisHostname" -ForegroundColor Green
                  }
                  elseif ($RedisResult -match 'Wrong number of args calling Redis command From Lua script') {
                      Write-Host "Cache key '$Key' missing in $RedisHostname" -ForegroundColor Yellow
                  }
                  elseif ($RedisResult -match 'too many results to unpack') {
                      Write-Host "Cache key '$Key' has too many results to unpack in $RedisHostname" -ForegroundColor Yellow
                      exit 1
                  }
                  else {
                      Write-Host "Cache key '$Key' status unknown in $RedisHostname" -ForegroundColor Red
                      Write-Host "Full output: $RedisResult"
                      exit 1
                  }

                  Remove-Item $TempScriptPath -Force
              }
          }

