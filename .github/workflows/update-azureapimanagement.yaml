name: Update Azure API Management

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      apiSpecificationPath:
        required: false
        type: string
        description: "Relative Path to Open API Specification."
        default: "/swagger/v1/swagger.json"
      repositoryName:
        required: false
        type: string
        description: "GitHub Repository Name."
        default: ${{ github.event.repository.name }}
    secrets:
      azurePassword:
        required: false
      azureSubscription:
        required: false
      azureCredentials:
        required: false
      storageAccountKey:
        required: true

jobs:
  update-api-management:
    name: Update API Management Service
    runs-on: azure
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login via Az module
        uses: azure/login@v2
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Retrieve Application information
        id: getappinfo
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            Install-Module -Name AzTable -Force
            Import-Module AzTable

            # Define the storage account and table name
            $appInfoTableName = "DeployedApplications"
            $storageAccountName = "amucloudapps"

            $storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey ${{ secrets.storageAccountKey }}

            # Get Storage table
            try {
                $appInfoTable = (Get-AzStorageTable -Name $appInfoTableName -Context $storageContext -ErrorAction Stop).CloudTable 
                }
            catch {
                Write-Error -Message "Error accessing cloud $appInfoTableName table.  Error message was: $_.Exception.Message"
                return
                }

            # Retrieve the application information
            $appInfo = Get-AzTableRow -Table $appInfoTable -PartitionKey "${{ inputs.repositoryName }}" -RowKey "${{ inputs.environment }}"

            # Set the application information as variables
            $applicationName = $appInfo.ApplicationName
            $version = $appInfo.Version
            $keyVault = $appInfo.KeyVault
            $hostName = $appInfo.HostName
            $domainName = $appInfo.DomainName
            $ingressFqdn = $appInfo.IngressFqdn
            $healthCheckPath = $appInfo.HealthCheckPath
            $aksIngress = $appInfo.AksIngress

            # Set the application information as output variables
            echo "applicationName=$applicationName" >> $env:GITHUB_OUTPUT
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "keyVault=$keyVault" >> $env:GITHUB_OUTPUT
            echo "hostName=$hostName" >> $env:GITHUB_OUTPUT
            echo "domainName=$domainName" >> $env:GITHUB_OUTPUT
            echo "applicationIngressFqdn=$ingressFqdn" >> $env:GITHUB_OUTPUT
            echo "healthCheckPath=$healthCheckPath" >> $env:GITHUB_OUTPUT
            echo "aksIngress=$aksIngress" >> $env:GITHUB_OUTPUT

      - name: Update Azure API Management
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            # Set API Management variables
            $ApiProductId = "AZ-WebServices"
            $ApiSubscriptionRequired = $True

            # Generate API ID by appending "-api" to the repository name and replacing underscores with hyphens
            $ApiId = ("${{ github.event.repository.name }}-api").Replace("_","-")

            # Retrieve the resource group and service name based on the environment tag
            $ResourceGroup = (Get-AzResource -ResourceType Microsoft.ApiManagement/service -Tag @{"environment"="${{ inputs.environment }}"}).ResourceGroupName
            $ServiceName = (Get-AzResource -ResourceType Microsoft.ApiManagement/service -Tag @{"environment"="${{ inputs.environment }}"}).Name

            # Get the fully qualified domain name (FQDN) of the service from previous steps
            $serviceFqdn = "${{ steps.getappinfo.outputs.applicationIngressFqdn }}"
            $ServiceURL = "https://$serviceFqdn"

            # Create a context object for API management operations
            $Context = New-AzApiManagementContext -ResourceGroupName $ResourceGroup -ServiceName $ServiceName

            # Retrieve the API Version Set
            $apiVersionSet = Get-AzApiManagementApiVersionSet -Context $Context | Where-Object { $_.DisplayName -eq $ApiId }
            if (-not $apiVersionSet) { # Corrected variable name here
                $apiVersionSet = New-AzApiManagementApiVersionSet -Context $Context -Name $ApiId -Scheme Segment -Description "$ApiId API"
            }

            # Update API versions
            1..3 | ForEach-Object {
                $version = $_

                # Check if the versioned API exists
                $apiDirectory = Get-ChildItem -Directory -Recurse -Filter "V${version}" -ErrorAction SilentlyContinue | Select-Object -First 1
                if ($apiDirectory -and (Test-Path -Path $apiDirectory.FullName)) {
                    # Construct the Swagger URL for each version
                    $SwaggerURL = "https://$serviceFqdn/swagger/v$version/swagger.json"
                    Write-Output $SwaggerURL

                    # Generate a unique API ID for each version
                    $versionedApiId = "$ApiId-v$version"

                    # Pull down Swagger JSON
                    $SwaggerJSON = (Invoke-WebRequest -Uri $SwaggerURL).Content

                    # Remove path prefix from Swagger JSON
                    $SwaggerJSON = $SwaggerJSON -replace "/v${version}", ""

                    # Save Swagger JSON to file
                    $SwaggerJSONFile = "swagger.json"
                    $SwaggerJSON | Out-File -FilePath $SwaggerJSONFile

                    # # Import the versioned API
                    Import-AzApiManagementApi -Context $Context -SpecificationPath $SwaggerJSONFile -SpecificationFormat OpenApi -Path $ApiId -ApiId "$versionedApiId" -ApiVersion "v$version" -ApiVersionSetId $ApiVersionSet.Id

                    # Retrieve and update the API object
                    $Api = Get-AzApiManagementApi -Context $Context -ApiId "$versionedApiId"
                    $Api.ServiceURL = "$ServiceURL/v${version}"
                    $Api.SubscriptionRequired = $ApiSubscriptionRequired

                    # Associate the versioned API with a product
                    Set-AzApiManagementApi -InputObject $Api
                    Add-AzApiManagementApiToProduct -Context $Context -ApiId "$versionedApiId" -ProductId $ApiProductId
                }
                else {
                    Write-Output "Version V$version does not exist in this repository."
                }
            }