name: Update Azure API Management

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      apiSpecificationPath:
        required: false
        type: string
        description: "Relative Path to Open API Specification."
        default: "/swagger/v1/swagger.json"
      apiId:
        required: false
        type: string
        description: "API Name for Azure API Management."
      apiProductId:
        required: false
        type: string
        description: "Azure API Management Product Name for API."
        default: "AZ-WebServices"
      apiSubscriptionRequired:
        required: false
        type: boolean
        description: "Is a subcription required to access the API."
        default: true
      apiServiceName:
        required: false
        type: string
        description: "Name of API Management Service."
      apiServiceResourceGroup:
        required: false
        type: string
        description: "API Service Resource Group."
      azureUser:
        required: false
        type: string
        description: "Azure user with credentials to add APIs."
        default: "amu_deploy@amuniversal.com"
      repositoryName:
        required: false
        type: string
        description: "GitHub Repository Name."
        default: ${{ github.event.repository.name }}
      storageAccountName:
        required: false
        type: string
        description: "Storage Account for application information table."
        default: "amucloudapps"
      appInfoTableName:
        required: false
        type: string
        description: "Application information storage table."
        default: "DeployedApplications"
    secrets:
      azurePassword:
        required: false
      azureSubscription:
        required: false
      azureCredentials:
        required: false
      storageAccountKey:
        required: true

jobs:
  update-api-management:
    name: Update API Management Service
    runs-on: ubuntu-latest
    env:
      azureCredentials: ${{ secrets.azureCredentials }}
      azurePassword: ${{ secrets.azurePassword }}
      azureSubscription: ${{ secrets.azureSubscription }}
    steps:
      - name: Login via Az module
        if: ${{ env.azureCredentials }}
        uses: azure/login@v2
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Login via PowerShell
        if: ${{ inputs.azureUser && env.azurePassword && env.azureSubscription }}
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $User = "${{ inputs.azureUser }}"
            $Password = ConvertTo-SecureString -String "${{ secrets.azurePassword }}" -AsPlainText -Force
            $Subscription = "${{ secrets.azureSubscription }}"
            $Credential = New-Object -TypeName "System.Management.Automation.PSCredential" -ArgumentList $User,$Password
            $ResourceGroup = "${{ inputs.apiServiceResourceGroup }}"
            $ServiceName = "${{ inputs.apiServiceName }}"
            Connect-AzAccount -Subscription $Subscription -Credential $Credential

      - name: Retrieve Application information
        id: getappinfo
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            Install-Module -Name AzTable -Force
            Import-Module AzTable

            $appInfoTableName = "${{ inputs.appInfoTableName }}"

            $storageContext = New-AzStorageContext -StorageAccountName ${{ inputs.storageAccountName }} -StorageAccountKey ${{ secrets.storageAccountKey }}

            #Get Storage table
            try {
                $appInfoTable = (Get-AzStorageTable -Name $appInfoTableName -Context $storageContext -ErrorAction Stop).CloudTable 
                }
            catch {
                Write-Error -Message "Error accessing cloud $appInfoTableName table.  Error message was: $_.Exception.Message"
                return
                }

            $appInfo = Get-AzTableRow -Table $appInfoTable -PartitionKey "${{ inputs.repositoryName }}" -RowKey "${{ inputs.environment }}"

            $applicationName = $appInfo.ApplicationName
            $version = $appInfo.Version
            $keyVault = $appInfo.KeyVault
            $hostName = $appInfo.HostName
            $domainName = $appInfo.DomainName
            $ingressFqdn = $appInfo.IngressFqdn
            $healthCheckPath = $appInfo.HealthCheckPath
            $aksIngress = $appInfo.AksIngress

            echo "applicationName=$applicationName" >> $env:GITHUB_ENV
            echo "version=$version" >> $env:GITHUB_ENV
            echo "keyVault=$keyVault" >> $env:GITHUB_ENV
            echo "hostName=$hostName" >> $env:GITHUB_ENV
            echo "domainName=$domainName" >> $env:GITHUB_ENV
            echo "applicationIngressFqdn=$ingressFqdn" >> $env:GITHUB_ENV
            echo "healthCheckPath=$healthCheckPath" >> $env:GITHUB_ENV
            echo "aksIngress=$aksIngress" >> $env:GITHUB_ENV

      - name: Update Azure API Management
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $serviceFqdn = "${{ env.applicationIngressFqdn }}"
            $APISpecPath = "${{ inputs.apiSpecificationPath }}"
            $SwaggerURL = "https://$serviceFqdn$APISpecPath"
            $ServiceURL = "https://$serviceFqdn"
            $ApiProductId = "${{ inputs.apiProductId }}"
            $ApiSubscriptionRequired = ${{ inputs.apiSubscriptionRequired }}

            echo "SwaggerURL: $SwaggerURL"

            if ("${{ inputs.apiId }}") {
              $ApiId = "${{ inputs.apiId }}"
            }
            else {
              $ApiId = ("${{ github.event.repository.name }}-api").Replace("_","-") 
            }

            if ("${{ inputs.apiServiceResourceGroup }}") {
              $ResourceGroup = "${{ inputs.apiServiceResourceGroup }}"
            }
            else {
              $ResourceGroup = (Get-AzResource -ResourceType Microsoft.ApiManagement/service -Tag @{"environment"="${{ inputs.environment }}"}).ResourceGroupName
            }

            if ("${{ inputs.apiServiceName }}") {
              $ServiceName = "${{ inputs.apiServiceName }}"
            }
            else {
              $ServiceName = (Get-AzResource -ResourceType Microsoft.ApiManagement/service -Tag @{"environment"="${{ inputs.environment }}"}).Name
            }

            $Context = New-AzApiManagementContext -ResourceGroupName $ResourceGroup -ServiceName $ServiceName
            Import-AzApiManagementApi -Context $Context -SpecificationUrl $SwaggerURL -SpecificationFormat OpenApi -Path $ApiId -ApiId $ApiId
            $Api = Get-AzApiManagementApi -Context $Context -ApiId $ApiId
            $Api.ServiceURL = $ServiceURL
            $Api.SubscriptionRequired = $ApiSubscriptionRequired
            Set-AzApiManagementApi -InputObject $Api
            Add-AzApiManagementApiToProduct -Context $Context -ApiId $ApiId -ProductId $ApiProductId
