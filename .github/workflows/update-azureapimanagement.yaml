name: Update Azure API Management

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Deploy environment. Can be development, staging, or production."
      apiSpecificationPath:
        required: false
        type: string
        description: "Relative Path to Open API Specification."
        default: "/swagger/v1/swagger.json"
      repositoryName:
        required: false
        type: string
        description: "GitHub Repository Name."
        default: ${{ github.event.repository.name }}
      productId:
        required: false
        type: string
        description: "API Management Product ID."
        default: ${{ vars.API_PRODUCT_ID || 'AZ-WebServices' }}
      apiSuffix:
        required: false
        type: string
        description: "API Suffix for the API URL."
        default: ${{ vars.API_SUFFIX || 'true' }}
      deploymentWebhook:
        required: false
        type: string
        description: "The webhook URL for the deployment status"
        default: ${{ vars.MSTEAMS_DEPLOYMENT_WEBHOOK }}
    secrets:
      azurePassword:
        required: false
      azureSubscription:
        required: false
      azureCredentials:
        required: false
      storageAccountKey:
        required: true

jobs:
  update-api-management:
    name: Update API Management Service
    runs-on: azure
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name AzTable -Force

      - name: Login via Az module
        uses: azure/login@v2
        with:
          creds: "${{ secrets.azureCredentials }}"
          enable-AzPSSession: true

      - name: Retrieve Application information
        id: getappinfo
        shell: pwsh
        run: |
          # Define the storage account and table name
          $appInfoTableName = "DeployedApplications"
          $storageAccountName = "amucloudapps"

          $storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey ${{ secrets.storageAccountKey }}

          # Get Storage table
          try {
              $appInfoTable = (Get-AzStorageTable -Name $appInfoTableName -Context $storageContext -ErrorAction Stop).CloudTable 
              }
          catch {
              Write-Error -Message "Error accessing cloud $appInfoTableName table.  Error message was: $_.Exception.Message"
              return
              }

          # Retrieve the application information
          $appInfo = Get-AzTableRow -Table $appInfoTable -PartitionKey "${{ inputs.repositoryName }}" -RowKey "${{ inputs.environment }}"

          # Set the application information as output variables
          echo "applicationIngressFqdn=$($appInfo.IngressFqdn)" >> $env:GITHUB_OUTPUT

      - name: Update Azure API Management
        shell: pwsh
        run: |
          # Set API Management variables
          $ApiProductId = "${{ inputs.productId }}"
          $ApiSubscriptionRequired = $True

          # Generate API ID by appending "-api" to the repository name and replacing underscores with hyphens
          $ApiSuffix = if ("${{ inputs.apiSuffix }}" -eq "true") { "-api" } else { "" }
          $ApiId = ("${{ github.event.repository.name }}$ApiSuffix").Replace("_","-")

          # Retrieve the resource group and service name based on the environment tag
          $ResourceGroup = (Get-AzResource -ResourceType Microsoft.ApiManagement/service -Tag @{"environment"="${{ inputs.environment }}"}).ResourceGroupName
          $ServiceName = (Get-AzResource -ResourceType Microsoft.ApiManagement/service -Tag @{"environment"="${{ inputs.environment }}"}).Name

          # Get the fully qualified domain name (FQDN) of the service from previous steps
          $serviceFqdn = "${{ steps.getappinfo.outputs.applicationIngressFqdn }}"
          $ServiceURL = "https://$serviceFqdn"

          # Create a context object for API management operations
          $Context = New-AzApiManagementContext -ResourceGroupName $ResourceGroup -ServiceName $ServiceName

          # Retrieve the API Version Set
          $apiVersionSet = Get-AzApiManagementApiVersionSet -Context $Context | Where-Object { $_.DisplayName -eq $ApiId }
          if (-not $apiVersionSet) {
              $apiVersionSet = New-AzApiManagementApiVersionSet -Context $Context -Name $ApiId -Scheme Segment -Description "$ApiId API"
          }

          # Check if the original API exists
          Get-AzApiManagementApi -Context $Context -ApiId $ApiId -ErrorAction SilentlyContinue | Where-Object { -not $_.ApiVersionSetId } | ForEach-Object {
              $_.ApiVersionSetId = $apiVersionSet.Id
              Set-AzApiManagementApi -InputObject $_
              $OriginalVersion = $True
          }

          # Update API versions
          $SwaggerReachable = $False
          1..3 | ForEach-Object {
              $version = $_

              # Construct the Swagger URL for each version
              $SwaggerURL = "https://$serviceFqdn/swagger/v$version/swagger.json"

              # Pull down Swagger JSON
              $SwaggerJSON = Invoke-WebRequest -Uri $SwaggerURL -SkipHttpErrorCheck

              # Check if the versioned API exists
              if ($SwaggerJSON.StatusCode -eq 200) {
                  $SwaggerReachable = $True

                  # Get Swagger JSON content
                  Write-Output "Importing API version V${version}: $SwaggerURL"
                  $SwaggerJSON = $SwaggerJSON.Content -replace "/v${version}", ""

                  # Generate a unique API ID for each version
                  $versionedApiId = "$ApiId-v$version"


                  # Save Swagger JSON to file
                  $SwaggerJSONFile = "swagger.json"
                  $SwaggerJSON | Out-File -FilePath $SwaggerJSONFile

                  # Import the versioned API
                  Import-AzApiManagementApi -Context $Context -SpecificationPath $SwaggerJSONFile -SpecificationFormat OpenApi -Path $ApiId -ApiId "$versionedApiId" -ApiVersion "v$version" -ApiVersionSetId $ApiVersionSet.Id

                  # Retrieve and update the API object
                  $Api = Get-AzApiManagementApi -Context $Context -ApiId "$versionedApiId"
                  $Api.ServiceURL = "$ServiceURL/v${version}"
                  $Api.SubscriptionRequired = $ApiSubscriptionRequired

                  # Associate the versioned API with a product
                  Set-AzApiManagementApi -InputObject $Api
                  Add-AzApiManagementApiToProduct -Context $Context -ApiId "$versionedApiId" -ProductId "AZ-WebServices"
                  if ($ApiProductId -ne "AZ-WebServices") {
                      Add-AzApiManagementApiToProduct -Context $Context -ApiId "$versionedApiId" -ProductId $ApiProductId
                  }

                  # Remove the original API spec
                  if ($OriginalVersion) {
                      Remove-AzApiManagementApi -Context $Context -ApiId $ApiId
                  }
              }
              else {
                  Write-Output "API version V${version} (${SwaggerURL}): $($SwaggerJSON.StatusCode) $($SwaggerJSON.StatusDescription)"
              }
          }
          # Error out if no Swagger JSON was reachable
          if (-not $SwaggerReachable) {
              Write-Error "ERROR: No Swagger JSON was reachable for any version."
              exit 1
          }
      
      - name: Send Failed Deployment report to Teams
        if: failure() && (inputs.environment != 'development')
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ inputs.deploymentWebhook }}
          notification-summary: "${{ github.event.release.tag_name != '' && format('{0} ', github.event.release.tag_name) || ' ' }}Failed ${{ inputs.environment }} Deployment"
          notification-color: 17a2b8
          timezone: America/Chicago
          verbose-logging: true